<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/voyeger/LandingController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/voyeger/LandingController.java" />
              <option name="originalContent" value="package com.example.voyeger;&#10;&#10;import javafx.fxml.FXML;&#10;import javafx.fxml.FXMLLoader;&#10;import javafx.scene.Parent;&#10;import javafx.scene.Scene;&#10;import javafx.stage.Stage;&#10;import javafx.scene.Node;&#10;import javafx.event.ActionEvent;&#10;import javafx.scene.control.Alert;&#10;import javafx.scene.control.Alert.AlertType;&#10;&#10;public class LandingController {&#10;&#10;    @FXML&#10;    private void handleGetStarted(ActionEvent event) {&#10;        // Navigate to Trip Planner (or Registration page)&#10;        try {&#10;            FXMLLoader loader = new FXMLLoader(getClass().getResource(&quot;TripPlanner.fxml&quot;));&#10;            Parent root = loader.load();&#10;&#10;            Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();&#10;            Scene scene = new Scene(root, 1000, 700);&#10;            stage.setScene(scene);&#10;            stage.setTitle(&quot;Voyager+ - Trip Planner&quot;);&#10;            stage.show();&#10;&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;            showAlert(&quot;Error&quot;, &quot;Failed to load Trip Planner: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    @FXML&#10;    private void handleSignIn(ActionEvent event) {&#10;        // Navigate to Login page (create Login.fxml later)&#10;        // For now, also navigate to Trip Planner&#10;        try {&#10;            FXMLLoader loader = new FXMLLoader(getClass().getResource(&quot;TripPlanner.fxml&quot;));&#10;            Parent root = loader.load();&#10;&#10;            Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();&#10;            Scene scene = new Scene(root, 1000, 700);&#10;            stage.setScene(scene);&#10;            stage.setTitle(&quot;Voyager+ - Sign In&quot;);&#10;            stage.show();&#10;&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;            showAlert(&quot;Error&quot;, &quot;Failed to load Sign In: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    private void showAlert(String title, String message) {&#10;        Alert alert = new Alert(AlertType.ERROR);&#10;        alert.setTitle(title);&#10;        alert.setHeaderText(null);&#10;        alert.setContentText(message);&#10;        alert.showAndWait();&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.voyeger;&#13;&#10;&#13;&#10;import javafx.fxml.FXML;&#13;&#10;import javafx.fxml.FXMLLoader;&#13;&#10;import javafx.scene.Parent;&#13;&#10;import javafx.scene.Scene;&#13;&#10;import javafx.stage.Stage;&#13;&#10;import javafx.scene.Node;&#13;&#10;import javafx.event.ActionEvent;&#13;&#10;import javafx.scene.control.Alert;&#13;&#10;import javafx.scene.control.Alert.AlertType;&#13;&#10;&#13;&#10;public class LandingController {&#13;&#10;&#13;&#10;    @FXML&#13;&#10;    private void handleGetStarted(ActionEvent event) {&#13;&#10;        // Navigate to Trip Planner (or Registration page)&#13;&#10;        try {&#13;&#10;            FXMLLoader loader = new FXMLLoader(getClass().getResource(&quot;TripPlanner.fxml&quot;));&#13;&#10;            Parent root = loader.load();&#13;&#10;&#13;&#10;            Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();&#13;&#10;            Scene scene = new Scene(root, 1000, 700);&#13;&#10;            stage.setScene(scene);&#13;&#10;            stage.setTitle(&quot;Voyager+ - Trip Planner&quot;);&#13;&#10;            stage.setResizable(true);&#13;&#10;            stage.setMaximized(true);&#13;&#10;            stage.show();&#13;&#10;&#13;&#10;        } catch (Exception e) {&#13;&#10;            e.printStackTrace();&#13;&#10;            showAlert(&quot;Error&quot;, &quot;Failed to load Trip Planner: &quot; + e.getMessage());&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    @FXML&#13;&#10;    private void handleSignIn(ActionEvent event) {&#13;&#10;        // Navigate to Login page (create Login.fxml later)&#13;&#10;        // For now, also navigate to Trip Planner&#13;&#10;        try {&#13;&#10;            FXMLLoader loader = new FXMLLoader(getClass().getResource(&quot;TripPlanner.fxml&quot;));&#13;&#10;            Parent root = loader.load();&#13;&#10;&#13;&#10;            Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();&#13;&#10;            Scene scene = new Scene(root, 1000, 700);&#13;&#10;            stage.setScene(scene);&#13;&#10;            stage.setTitle(&quot;Voyager+ - Sign In&quot;);&#13;&#10;            stage.setResizable(true);&#13;&#10;            stage.setMaximized(true);&#13;&#10;            stage.show();&#13;&#10;&#13;&#10;        } catch (Exception e) {&#13;&#10;            e.printStackTrace();&#13;&#10;            showAlert(&quot;Error&quot;, &quot;Failed to load Sign In: &quot; + e.getMessage());&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private void showAlert(String title, String message) {&#13;&#10;        Alert alert = new Alert(AlertType.ERROR);&#13;&#10;        alert.setTitle(title);&#13;&#10;        alert.setHeaderText(null);&#13;&#10;        alert.setContentText(message);&#13;&#10;        alert.showAndWait();&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/voyeger/Main.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/voyeger/Main.java" />
              <option name="originalContent" value="package com.example.voyeger;&#10;&#10;import javafx.application.Application;&#10;import javafx.fxml.FXMLLoader;&#10;import javafx.scene.Scene;&#10;import javafx.stage.Stage;&#10;&#10;public class Main extends Application {&#10;    @Override&#10;    public void start(Stage stage) throws Exception {&#10;        FXMLLoader loader = new FXMLLoader(getClass().getResource(&quot;Welcome.fxml&quot;));&#10;        Scene scene = new Scene(loader.load(), 1400, 800);&#10;        stage.setTitle(&quot;Voyager+ - Welcome&quot;);&#10;        stage.setScene(scene);&#10;        stage.setResizable(false);&#10;        stage.show();&#10;    }&#10;&#10;    @Override&#10;    public void stop() {&#10;        // Close MongoDB connection when app closes&#10;        DatabaseManager.getInstance().close();&#10;    }&#10;&#10;    public static void main(String[] args) {&#10;        launch();&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.voyeger;&#10;&#10;import javafx.application.Application;&#10;import javafx.fxml.FXMLLoader;&#10;import javafx.scene.Scene;&#10;import javafx.stage.Stage;&#10;&#10;public class Main extends Application {&#10;    @Override&#10;    public void start(Stage stage) throws Exception {&#10;        FXMLLoader loader = new FXMLLoader(getClass().getResource(&quot;Welcome.fxml&quot;));&#10;        Scene scene = new Scene(loader.load(), 1400, 800);&#10;        stage.setTitle(&quot;Voyager+ - Welcome&quot;);&#10;        stage.setScene(scene);&#10;        stage.setResizable(true);&#10;        stage.setMaximized(true);&#10;        stage.show();&#10;    }&#10;&#10;    @Override&#10;    public void stop() {&#10;        // Close MongoDB connection when app closes&#10;        DatabaseManager.getInstance().close();&#10;    }&#10;&#10;    public static void main(String[] args) {&#10;        launch();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/voyeger/NavbarController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/voyeger/NavbarController.java" />
              <option name="originalContent" value="package com.example.voyeger;&#10;&#10;import javafx.fxml.FXML;&#10;import javafx.fxml.FXMLLoader;&#10;import javafx.scene.Parent;&#10;import javafx.scene.Scene;&#10;import javafx.scene.control.*;&#10;import javafx.scene.layout.HBox;&#10;import javafx.stage.Stage;&#10;import javafx.scene.Node;&#10;import javafx.event.ActionEvent;&#10;&#10;public class NavbarController {&#10;&#10;    @FXML&#10;    private Label brandLabel;&#10;&#10;    @FXML&#10;    private Button homeBtn, tripsBtn, hotelBtn, toolsBtn, communityBtn, learnBtn, mapBtn, profileBtn;&#10;&#10;    @FXML&#10;    private Label notificationBadge;&#10;&#10;    @FXML&#10;    private HBox navbarContainer;&#10;&#10;    private TripService tripService;&#10;    private String currentPage = &quot;home&quot;;&#10;&#10;    @FXML&#10;    public void initialize() {&#10;        tripService = TripService.getInstance();&#10;        updateNotificationBadge();&#10;        highlightCurrentPage(currentPage);&#10;    }&#10;&#10;    public void setCurrentPage(String page) {&#10;        this.currentPage = page;&#10;        highlightCurrentPage(page);&#10;    }&#10;&#10;    private void highlightCurrentPage(String page) {&#10;        // Remove active class from all buttons&#10;        homeBtn.getStyleClass().remove(&quot;active-nav&quot;);&#10;        tripsBtn.getStyleClass().remove(&quot;active-nav&quot;);&#10;        hotelBtn.getStyleClass().remove(&quot;active-nav&quot;);&#10;        toolsBtn.getStyleClass().remove(&quot;active-nav&quot;);&#10;        communityBtn.getStyleClass().remove(&quot;active-nav&quot;);&#10;        learnBtn.getStyleClass().remove(&quot;active-nav&quot;);&#10;        mapBtn.getStyleClass().remove(&quot;active-nav&quot;);&#10;        profileBtn.getStyleClass().remove(&quot;active-nav&quot;);&#10;&#10;        // Add active class to current page&#10;        switch (page.toLowerCase()) {&#10;            case &quot;home&quot; -&gt; homeBtn.getStyleClass().add(&quot;active-nav&quot;);&#10;            case &quot;trips&quot; -&gt; tripsBtn.getStyleClass().add(&quot;active-nav&quot;);&#10;            case &quot;hotel&quot; -&gt; hotelBtn.getStyleClass().add(&quot;active-nav&quot;);&#10;            case &quot;tools&quot; -&gt; toolsBtn.getStyleClass().add(&quot;active-nav&quot;);&#10;            case &quot;community&quot; -&gt; communityBtn.getStyleClass().add(&quot;active-nav&quot;);&#10;            case &quot;learn&quot; -&gt; learnBtn.getStyleClass().add(&quot;active-nav&quot;);&#10;            case &quot;map&quot; -&gt; mapBtn.getStyleClass().add(&quot;active-nav&quot;);&#10;            case &quot;profile&quot; -&gt; profileBtn.getStyleClass().add(&quot;active-nav&quot;);&#10;        }&#10;    }&#10;&#10;    @FXML&#10;    private void handleHome(ActionEvent event) {&#10;        navigateToPage(&quot;NewsFeed.fxml&quot;, &quot;Home - Voyager+&quot;, &quot;home&quot;);&#10;    }&#10;&#10;    @FXML&#10;    private void handleTrips(ActionEvent event) {&#10;        showTripsMenu(event);&#10;    }&#10;&#10;    @FXML&#10;    private void handleHotel(ActionEvent event) {&#10;        navigateToPage(&quot;HotelBooking.fxml&quot;, &quot;Hotel Booking - Voyager+&quot;, &quot;hotel&quot;);&#10;    }&#10;&#10;    @FXML&#10;    private void handleTools(ActionEvent event) {&#10;        showToolsMenu(event);&#10;    }&#10;&#10;    @FXML&#10;    private void handleCommunity(ActionEvent event) {&#10;        showCommunityMenu(event);&#10;    }&#10;&#10;    @FXML&#10;    private void handleLearn(ActionEvent event) {&#10;        showLearnMenu(event);&#10;    }&#10;&#10;    @FXML&#10;    private void handleMap(ActionEvent event) {&#10;        navigateToPage(&quot;MapExplorer.fxml&quot;, &quot;Map Explorer - Voyager+&quot;, &quot;map&quot;);&#10;    }&#10;&#10;    @FXML&#10;    private void handleProfile(ActionEvent event) {&#10;        showProfileMenu(event);&#10;    }&#10;&#10;    private void showTripsMenu(ActionEvent event) {&#10;        ContextMenu menu = new ContextMenu();&#10;&#10;        MenuItem createTrip = new MenuItem(&quot;✈ Create Trip&quot;);&#10;        createTrip.setOnAction(e -&gt; navigateToPage(&quot;TripPlanner.fxml&quot;, &quot;Create Trip - Voyager+&quot;, &quot;trips&quot;));&#10;&#10;        MenuItem myTrips = new MenuItem(&quot; My Trips&quot;);&#10;        myTrips.setOnAction(e -&gt; navigateToPage(&quot;MyTrips.fxml&quot;, &quot;My Trips - Voyager+&quot;, &quot;trips&quot;));&#10;&#10;        MenuItem exploreTrips = new MenuItem(&quot; Explore Trips&quot;);&#10;        exploreTrips.setOnAction(e -&gt; navigateToPage(&quot;ExploreTrips.fxml&quot;, &quot;Explore Trips - Voyager+&quot;, &quot;trips&quot;));&#10;&#10;        menu.getItems().addAll(createTrip, myTrips, exploreTrips);&#10;        menu.show((Node) event.getSource(), javafx.geometry.Side.BOTTOM, 0, 0);&#10;    }&#10;&#10;    private void showToolsMenu(ActionEvent event) {&#10;        ContextMenu menu = new ContextMenu();&#10;&#10;        MenuItem expenseCalc = new MenuItem(&quot; Expense Calculator&quot;);&#10;        expenseCalc.setOnAction(e -&gt; navigateToPage(&quot;ExpenseCalculator.fxml&quot;, &quot;Expense Calculator - Voyager+&quot;, &quot;tools&quot;));&#10;&#10;        MenuItem notepad = new MenuItem(&quot; Notepad&quot;);&#10;        notepad.setOnAction(e -&gt; navigateToPage(&quot;Notepad.fxml&quot;, &quot;Notepad - Voyager+&quot;, &quot;tools&quot;));&#10;&#10;        MenuItem calculator = new MenuItem(&quot; Calculator&quot;);&#10;        calculator.setOnAction(e -&gt; navigateToPage(&quot;Calculator.fxml&quot;, &quot;Calculator - Voyager+&quot;, &quot;tools&quot;));&#10;&#10;        menu.getItems().addAll(expenseCalc, notepad, calculator);&#10;        menu.show((Node) event.getSource(), javafx.geometry.Side.BOTTOM, 0, 0);&#10;    }&#10;&#10;    private void showCommunityMenu(ActionEvent event) {&#10;        ContextMenu menu = new ContextMenu();&#10;&#10;        MenuItem chats = new MenuItem(&quot; Chats&quot;);&#10;        chats.setOnAction(e -&gt; navigateToPage(&quot;Chats.fxml&quot;, &quot;Chats - Voyager+&quot;, &quot;community&quot;));&#10;&#10;        MenuItem friends = new MenuItem(&quot; Friends&quot;);&#10;        friends.setOnAction(e -&gt; navigateToPage(&quot;Friends.fxml&quot;, &quot;Friends - Voyager+&quot;, &quot;community&quot;));&#10;&#10;        menu.getItems().addAll(chats, friends);&#10;        menu.show((Node) event.getSource(), javafx.geometry.Side.BOTTOM, 0, 0);&#10;    }&#10;&#10;    private void showLearnMenu(ActionEvent event) {&#10;        ContextMenu menu = new ContextMenu();&#10;&#10;        MenuItem quizzes = new MenuItem(&quot; Quizzes&quot;);&#10;        quizzes.setOnAction(e -&gt; navigateToPage(&quot;Quizzes.fxml&quot;, &quot;Quizzes - Voyager+&quot;, &quot;learn&quot;));&#10;&#10;        MenuItem games = new MenuItem(&quot; Mini Games&quot;);&#10;        games.setOnAction(e -&gt; navigateToPage(&quot;MiniGames.fxml&quot;, &quot;Mini Games - Voyager+&quot;, &quot;learn&quot;));&#10;&#10;        menu.getItems().addAll(quizzes, games);&#10;        menu.show((Node) event.getSource(), javafx.geometry.Side.BOTTOM, 0, 0);&#10;    }&#10;&#10;    private void showProfileMenu(ActionEvent event) {&#10;        ContextMenu menu = new ContextMenu();&#10;&#10;        MenuItem viewProfile = new MenuItem(&quot; View/Edit Profile&quot;);&#10;        viewProfile.setOnAction(e -&gt; navigateToPage(&quot;Profile.fxml&quot;, &quot;Profile - Voyager+&quot;, &quot;profile&quot;));&#10;&#10;        MenuItem rewardPoints = new MenuItem(&quot; My Reward Points&quot;);&#10;        rewardPoints.setOnAction(e -&gt; navigateToPage(&quot;RewardPoints.fxml&quot;, &quot;Reward Points - Voyager+&quot;, &quot;profile&quot;));&#10;&#10;        MenuItem settings = new MenuItem(&quot;⚙ Settings&quot;);&#10;        settings.setOnAction(e -&gt; navigateToPage(&quot;Settings.fxml&quot;, &quot;Settings - Voyager+&quot;, &quot;profile&quot;));&#10;&#10;        MenuItem logout = new MenuItem(&quot; Logout&quot;);&#10;        logout.setOnAction(e -&gt; handleLogout(event));&#10;&#10;        menu.getItems().addAll(viewProfile, rewardPoints, new SeparatorMenuItem(), settings, new SeparatorMenuItem(), logout);&#10;        menu.show((Node) event.getSource(), javafx.geometry.Side.BOTTOM, 0, 0);&#10;    }&#10;&#10;    private void navigateToPage(String fxmlFile, String title, String pageName) {&#10;        try {&#10;            FXMLLoader loader = new FXMLLoader(getClass().getResource(fxmlFile));&#10;            Parent root = loader.load();&#10;&#10;            Stage stage = (Stage) navbarContainer.getScene().getWindow();&#10;            stage.setScene(new Scene(root, 1400, 800));&#10;            stage.setTitle(title);&#10;&#10;            setCurrentPage(pageName);&#10;&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Failed to load page: &quot; + fxmlFile);&#10;            e.printStackTrace();&#10;&#10;            // Show alert if page doesn't exist yet&#10;            Alert alert = new Alert(Alert.AlertType.INFORMATION);&#10;            alert.setTitle(&quot;Coming Soon&quot;);&#10;            alert.setHeaderText(title);&#10;            alert.setContentText(&quot;This feature is under development and will be available soon!&quot;);&#10;            alert.showAndWait();&#10;        }&#10;    }&#10;&#10;    private void handleLogout(ActionEvent event) {&#10;        Alert confirm = new Alert(Alert.AlertType.CONFIRMATION);&#10;        confirm.setTitle(&quot;Logout&quot;);&#10;        confirm.setHeaderText(&quot;Are you sure you want to logout?&quot;);&#10;        confirm.setContentText(&quot;You will be redirected to the welcome page.&quot;);&#10;&#10;        confirm.showAndWait().ifPresent(response -&gt; {&#10;            if (response == ButtonType.OK) {&#10;                try {&#10;                    // Clear current user&#10;                    tripService.setCurrentUser(null);&#10;&#10;                    // Navigate to welcome page&#10;                    FXMLLoader loader = new FXMLLoader(getClass().getResource(&quot;Welcome.fxml&quot;));&#10;                    Parent root = loader.load();&#10;&#10;                    Stage stage = (Stage) navbarContainer.getScene().getWindow();&#10;                    stage.setScene(new Scene(root, 1400, 800));&#10;                    stage.setTitle(&quot;Voyager+ - Welcome&quot;);&#10;&#10;                } catch (Exception e) {&#10;                    e.printStackTrace();&#10;                }&#10;            }&#10;        });&#10;    }&#10;&#10;    private void updateNotificationBadge() {&#10;        // TODO: Update with actual notification count&#10;        // For now, set to 0 (hidden)&#10;        int notificationCount = 0;&#10;&#10;        if (notificationCount &gt; 0) {&#10;            notificationBadge.setText(String.valueOf(notificationCount));&#10;            notificationBadge.setVisible(true);&#10;        } else {&#10;            notificationBadge.setVisible(false);&#10;        }&#10;    }&#10;&#10;    public void refreshNotifications() {&#10;        updateNotificationBadge();&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.example.voyeger;&#10;&#10;import javafx.fxml.FXML;&#10;import javafx.fxml.FXMLLoader;&#10;import javafx.scene.Parent;&#10;import javafx.scene.Scene;&#10;import javafx.scene.control.*;&#10;import javafx.scene.layout.HBox;&#10;import javafx.stage.Stage;&#10;import javafx.scene.Node;&#10;import javafx.event.ActionEvent;&#10;&#10;public class NavbarController {&#10;&#10;    @FXML&#10;    private Label brandLabel;&#10;&#10;    @FXML&#10;    private Button homeBtn, tripsBtn, hotelBtn, toolsBtn, communityBtn, learnBtn, mapBtn, profileBtn;&#10;&#10;    @FXML&#10;    private Label notificationBadge;&#10;&#10;    @FXML&#10;    private HBox navbarContainer;&#10;&#10;    private TripService tripService;&#10;    private String currentPage = &quot;home&quot;;&#10;&#10;    @FXML&#10;    public void initialize() {&#10;        tripService = TripService.getInstance();&#10;        updateNotificationBadge();&#10;        highlightCurrentPage(currentPage);&#10;    }&#10;&#10;    public void setCurrentPage(String page) {&#10;        this.currentPage = page;&#10;        highlightCurrentPage(page);&#10;    }&#10;&#10;    private void highlightCurrentPage(String page) {&#10;        // Remove active class from all buttons&#10;        homeBtn.getStyleClass().remove(&quot;active-nav&quot;);&#10;        tripsBtn.getStyleClass().remove(&quot;active-nav&quot;);&#10;        hotelBtn.getStyleClass().remove(&quot;active-nav&quot;);&#10;        toolsBtn.getStyleClass().remove(&quot;active-nav&quot;);&#10;        communityBtn.getStyleClass().remove(&quot;active-nav&quot;);&#10;        learnBtn.getStyleClass().remove(&quot;active-nav&quot;);&#10;        mapBtn.getStyleClass().remove(&quot;active-nav&quot;);&#10;        profileBtn.getStyleClass().remove(&quot;active-nav&quot;);&#10;&#10;        // Add active class to current page&#10;        switch (page.toLowerCase()) {&#10;            case &quot;home&quot; -&gt; homeBtn.getStyleClass().add(&quot;active-nav&quot;);&#10;            case &quot;trips&quot; -&gt; tripsBtn.getStyleClass().add(&quot;active-nav&quot;);&#10;            case &quot;hotel&quot; -&gt; hotelBtn.getStyleClass().add(&quot;active-nav&quot;);&#10;            case &quot;tools&quot; -&gt; toolsBtn.getStyleClass().add(&quot;active-nav&quot;);&#10;            case &quot;community&quot; -&gt; communityBtn.getStyleClass().add(&quot;active-nav&quot;);&#10;            case &quot;learn&quot; -&gt; learnBtn.getStyleClass().add(&quot;active-nav&quot;);&#10;            case &quot;map&quot; -&gt; mapBtn.getStyleClass().add(&quot;active-nav&quot;);&#10;            case &quot;profile&quot; -&gt; profileBtn.getStyleClass().add(&quot;active-nav&quot;);&#10;        }&#10;    }&#10;&#10;    @FXML&#10;    private void handleHome(ActionEvent event) {&#10;        navigateToPage(&quot;NewsFeed.fxml&quot;, &quot;Home - Voyager+&quot;, &quot;home&quot;);&#10;    }&#10;&#10;    @FXML&#10;    private void handleTrips(ActionEvent event) {&#10;        showTripsMenu(event);&#10;    }&#10;&#10;    @FXML&#10;    private void handleHotel(ActionEvent event) {&#10;        navigateToPage(&quot;HotelBooking.fxml&quot;, &quot;Hotel Booking - Voyager+&quot;, &quot;hotel&quot;);&#10;    }&#10;&#10;    @FXML&#10;    private void handleTools(ActionEvent event) {&#10;        showToolsMenu(event);&#10;    }&#10;&#10;    @FXML&#10;    private void handleCommunity(ActionEvent event) {&#10;        showCommunityMenu(event);&#10;    }&#10;&#10;    @FXML&#10;    private void handleLearn(ActionEvent event) {&#10;        showLearnMenu(event);&#10;    }&#10;&#10;    @FXML&#10;    private void handleMap(ActionEvent event) {&#10;        navigateToPage(&quot;MapExplorer.fxml&quot;, &quot;Map Explorer - Voyager+&quot;, &quot;map&quot;);&#10;    }&#10;&#10;    @FXML&#10;    private void handleProfile(ActionEvent event) {&#10;        showProfileMenu(event);&#10;    }&#10;&#10;    private void showTripsMenu(ActionEvent event) {&#10;        ContextMenu menu = new ContextMenu();&#10;&#10;        MenuItem createTrip = new MenuItem(&quot;✈ Create Trip&quot;);&#10;        createTrip.setOnAction(e -&gt; navigateToPage(&quot;TripPlanner.fxml&quot;, &quot;Create Trip - Voyager+&quot;, &quot;trips&quot;));&#10;&#10;        MenuItem myTrips = new MenuItem(&quot; My Trips&quot;);&#10;        myTrips.setOnAction(e -&gt; navigateToPage(&quot;MyTrips.fxml&quot;, &quot;My Trips - Voyager+&quot;, &quot;trips&quot;));&#10;&#10;        MenuItem exploreTrips = new MenuItem(&quot; Explore Trips&quot;);&#10;        exploreTrips.setOnAction(e -&gt; navigateToPage(&quot;ExploreTrips.fxml&quot;, &quot;Explore Trips - Voyager+&quot;, &quot;trips&quot;));&#10;&#10;        menu.getItems().addAll(createTrip, myTrips, exploreTrips);&#10;        menu.show((Node) event.getSource(), javafx.geometry.Side.BOTTOM, 0, 0);&#10;    }&#10;&#10;    private void showToolsMenu(ActionEvent event) {&#10;        ContextMenu menu = new ContextMenu();&#10;&#10;        MenuItem expenseCalc = new MenuItem(&quot; Expense Calculator&quot;);&#10;        expenseCalc.setOnAction(e -&gt; navigateToPage(&quot;ExpenseCalculator.fxml&quot;, &quot;Expense Calculator - Voyager+&quot;, &quot;tools&quot;));&#10;&#10;        MenuItem notepad = new MenuItem(&quot; Notepad&quot;);&#10;        notepad.setOnAction(e -&gt; navigateToPage(&quot;Notepad.fxml&quot;, &quot;Notepad - Voyager+&quot;, &quot;tools&quot;));&#10;&#10;        MenuItem calculator = new MenuItem(&quot; Calculator&quot;);&#10;        calculator.setOnAction(e -&gt; navigateToPage(&quot;Calculator.fxml&quot;, &quot;Calculator - Voyager+&quot;, &quot;tools&quot;));&#10;&#10;        menu.getItems().addAll(expenseCalc, notepad, calculator);&#10;        menu.show((Node) event.getSource(), javafx.geometry.Side.BOTTOM, 0, 0);&#10;    }&#10;&#10;    private void showCommunityMenu(ActionEvent event) {&#10;        ContextMenu menu = new ContextMenu();&#10;&#10;        MenuItem chats = new MenuItem(&quot; Chats&quot;);&#10;        chats.setOnAction(e -&gt; navigateToPage(&quot;Chats.fxml&quot;, &quot;Chats - Voyager+&quot;, &quot;community&quot;));&#10;&#10;        MenuItem friends = new MenuItem(&quot; Friends&quot;);&#10;        friends.setOnAction(e -&gt; navigateToPage(&quot;Friends.fxml&quot;, &quot;Friends - Voyager+&quot;, &quot;community&quot;));&#10;&#10;        menu.getItems().addAll(chats, friends);&#10;        menu.show((Node) event.getSource(), javafx.geometry.Side.BOTTOM, 0, 0);&#10;    }&#10;&#10;    private void showLearnMenu(ActionEvent event) {&#10;        ContextMenu menu = new ContextMenu();&#10;&#10;        MenuItem quizzes = new MenuItem(&quot; Quizzes&quot;);&#10;        quizzes.setOnAction(e -&gt; navigateToPage(&quot;Quizzes.fxml&quot;, &quot;Quizzes - Voyager+&quot;, &quot;learn&quot;));&#10;&#10;        MenuItem games = new MenuItem(&quot; Mini Games&quot;);&#10;        games.setOnAction(e -&gt; navigateToPage(&quot;MiniGames.fxml&quot;, &quot;Mini Games - Voyager+&quot;, &quot;learn&quot;));&#10;&#10;        menu.getItems().addAll(quizzes, games);&#10;        menu.show((Node) event.getSource(), javafx.geometry.Side.BOTTOM, 0, 0);&#10;    }&#10;&#10;    private void showProfileMenu(ActionEvent event) {&#10;        ContextMenu menu = new ContextMenu();&#10;&#10;        MenuItem viewProfile = new MenuItem(&quot; View/Edit Profile&quot;);&#10;        viewProfile.setOnAction(e -&gt; navigateToPage(&quot;Profile.fxml&quot;, &quot;Profile - Voyager+&quot;, &quot;profile&quot;));&#10;&#10;        MenuItem rewardPoints = new MenuItem(&quot; My Reward Points&quot;);&#10;        rewardPoints.setOnAction(e -&gt; navigateToPage(&quot;RewardPoints.fxml&quot;, &quot;Reward Points - Voyager+&quot;, &quot;profile&quot;));&#10;&#10;        MenuItem settings = new MenuItem(&quot;⚙ Settings&quot;);&#10;        settings.setOnAction(e -&gt; navigateToPage(&quot;Settings.fxml&quot;, &quot;Settings - Voyager+&quot;, &quot;profile&quot;));&#10;&#10;        MenuItem logout = new MenuItem(&quot; Logout&quot;);&#10;        logout.setOnAction(e -&gt; handleLogout(event));&#10;&#10;        menu.getItems().addAll(viewProfile, rewardPoints, new SeparatorMenuItem(), settings, new SeparatorMenuItem(), logout);&#10;        menu.show((Node) event.getSource(), javafx.geometry.Side.BOTTOM, 0, 0);&#10;    }&#10;&#10;    private void navigateToPage(String fxmlFile, String title, String pageName) {&#10;        try {&#10;            FXMLLoader loader = new FXMLLoader(getClass().getResource(fxmlFile));&#10;            Parent root = loader.load();&#10;&#10;            Stage stage = (Stage) navbarContainer.getScene().getWindow();&#10;            stage.setScene(new Scene(root, 1400, 800));&#10;            stage.setTitle(title);&#10;&#10;            setCurrentPage(pageName);&#10;&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Failed to load page: &quot; + fxmlFile);&#10;            e.printStackTrace();&#10;&#10;            // Show alert if page doesn't exist yet&#10;            Alert alert = new Alert(Alert.AlertType.INFORMATION);&#10;            alert.setTitle(&quot;Coming Soon&quot;);&#10;            alert.setHeaderText(title);&#10;            alert.setContentText(&quot;This feature is under development and will be available soon!&quot;);&#10;            alert.showAndWait();&#10;        }&#10;    }&#10;&#10;    private void handleLogout(ActionEvent event) {&#10;        Alert confirm = new Alert(Alert.AlertType.CONFIRMATION);&#10;        confirm.setTitle(&quot;Logout&quot;);&#10;        confirm.setHeaderText(&quot;Are you sure you want to logout?&quot;);&#10;        confirm.setContentText(&quot;You will be redirected to the welcome page.&quot;);&#10;&#10;        confirm.showAndWait().ifPresent(response -&gt; {&#10;            if (response == ButtonType.OK) {&#10;                try {&#10;                    // Clear current user&#10;                    tripService.setCurrentUser(null);&#10;&#10;                    // Navigate to welcome page&#10;                    FXMLLoader loader = new FXMLLoader(getClass().getResource(&quot;Welcome.fxml&quot;));&#10;                    Parent root = loader.load();&#10;&#10;                    Stage stage = (Stage) navbarContainer.getScene().getWindow();&#10;                    stage.setScene(new Scene(root, 1400, 800));&#10;                    stage.setTitle(&quot;Voyager+ - Welcome&quot;);&#10;                    stage.setResizable(true);&#10;                    stage.setMaximized(true);&#10;&#10;                } catch (Exception e) {&#10;                    e.printStackTrace();&#10;                }&#10;            }&#10;        });&#10;    }&#10;&#10;    private void updateNotificationBadge() {&#10;        // TODO: Update with actual notification count&#10;        // For now, set to 0 (hidden)&#10;        int notificationCount = 0;&#10;&#10;        if (notificationCount &gt; 0) {&#10;            notificationBadge.setText(String.valueOf(notificationCount));&#10;            notificationBadge.setVisible(true);&#10;        } else {&#10;            notificationBadge.setVisible(false);&#10;        }&#10;    }&#10;&#10;    public void refreshNotifications() {&#10;        updateNotificationBadge();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/voyeger/NewsFeedController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/voyeger/NewsFeedController.java" />
              <option name="originalContent" value="package com.example.voyeger;&#10;&#10;import javafx.fxml.FXML;&#10;import javafx.fxml.FXMLLoader;&#10;import javafx.scene.control.*;&#10;import javafx.scene.layout.*;&#10;import javafx.collections.FXCollections;&#10;import javafx.collections.ObservableList;&#10;import javafx.geometry.Insets;&#10;import javafx.geometry.Pos;&#10;import javafx.scene.Parent;&#10;import javafx.scene.Scene;&#10;import javafx.stage.Stage;&#10;&#10;import java.time.format.DateTimeFormatter;&#10;import java.util.HashMap;&#10;import java.util.Map;&#10;&#10;public class NewsFeedController {&#10;&#10;    @FXML&#10;    private VBox feedContainer;&#10;&#10;    @FXML&#10;    private Label welcomeLabel;&#10;&#10;    @FXML&#10;    private Label tripCountLabel;&#10;&#10;    @FXML&#10;    private Label rewardPointsLabel;&#10;&#10;    @FXML&#10;    private Label upcomingTripsLabel;&#10;&#10;    @FXML&#10;    private Label communityLabel;&#10;&#10;    @FXML&#10;    private TextArea createPostArea;&#10;&#10;    @FXML&#10;    private VBox quickLinksContainer;&#10;&#10;    @FXML&#10;    private VBox notificationsContainer;&#10;&#10;    @FXML&#10;    private ScrollPane feedScrollPane;&#10;&#10;    private TripService tripService;&#10;    private ObservableList&lt;TripPost&gt; posts;&#10;    private Map&lt;String, Boolean&gt; likedPosts;&#10;&#10;    @FXML&#10;    public void initialize() {&#10;        tripService = TripService.getInstance();&#10;        posts = FXCollections.observableArrayList();&#10;        likedPosts = new HashMap&lt;&gt;();&#10;&#10;        updateWelcomeBanner();&#10;        setupQuickLinks();&#10;        loadNewsFeed();&#10;    }&#10;&#10;    private void updateWelcomeBanner() {&#10;        User currentUser = tripService.getCurrentUser();&#10;        if (currentUser != null) {&#10;            welcomeLabel.setText(&quot;Welcome, &quot; + currentUser.getDisplayName() + &quot;! &quot;);&#10;&#10;            // Update statistics&#10;            int tripCount = tripService.getUserTrips(currentUser.getUsername()).size();&#10;            tripCountLabel.setText(String.valueOf(tripCount));&#10;&#10;            // TODO: Implement reward points system&#10;            rewardPointsLabel.setText(&quot;0&quot;);&#10;&#10;            // Count upcoming trips (trips with future dates)&#10;            long upcomingCount = tripService.getUserTrips(currentUser.getUsername()).stream()&#10;                    .filter(trip -&gt; trip.getDate().isAfter(java.time.LocalDate.now()))&#10;                    .count();&#10;            upcomingTripsLabel.setText(String.valueOf(upcomingCount));&#10;&#10;            // Community count (total users or group members)&#10;            communityLabel.setText(&quot;1.2K&quot;);&#10;        } else {&#10;            welcomeLabel.setText(&quot;Welcome, Guest! &quot;);&#10;            tripCountLabel.setText(&quot;0&quot;);&#10;            rewardPointsLabel.setText(&quot;0&quot;);&#10;            upcomingTripsLabel.setText(&quot;0&quot;);&#10;            communityLabel.setText(&quot;0&quot;);&#10;        }&#10;    }&#10;&#10;    private void setupQuickLinks() {&#10;        // This would be populated from the FXML, but we can add dynamic behavior here if needed&#10;    }&#10;&#10;    @FXML&#10;    private void handleCreatePost() {&#10;        String content = createPostArea.getText().trim();&#10;        if (content.isEmpty()) {&#10;            showAlert(&quot;Empty Post&quot;, &quot;Please write something about your trip!&quot;);&#10;            return;&#10;        }&#10;&#10;        try {&#10;            FXMLLoader loader = new FXMLLoader(getClass().getResource(&quot;CreateTripDialog.fxml&quot;));&#10;            DialogPane dialogPane = loader.load();&#10;&#10;            CreateTripDialogController controller = loader.getController();&#10;&#10;            Dialog&lt;ButtonType&gt; dialog = new Dialog&lt;&gt;();&#10;            dialog.setTitle(&quot;Create Trip&quot;);&#10;            dialog.setDialogPane(dialogPane);&#10;&#10;            dialog.showAndWait().ifPresent(buttonType -&gt; {&#10;                if (buttonType.getButtonData() == ButtonBar.ButtonData.OK_DONE) {&#10;                    Trip trip = controller.getCreatedTrip();&#10;                    if (trip != null) {&#10;                        TripPost post = tripService.postTrip(trip.getId(), content);&#10;                        if (post != null) {&#10;                            createPostArea.clear();&#10;                            loadNewsFeed();&#10;                            showAlert(&quot;Success&quot;, &quot;Your trip has been posted to the news feed!&quot;);&#10;                        }&#10;                    }&#10;                }&#10;            });&#10;&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;            showAlert(&quot;Error&quot;, &quot;Failed to create trip post: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    @FXML&#10;    private void handleRefreshFeed() {&#10;        loadNewsFeed();&#10;        updateWelcomeBanner();&#10;    }&#10;&#10;    @FXML&#10;    private void handleMyTrips() {&#10;        navigateToPage(&quot;MyTrips.fxml&quot;, &quot;My Trips - Voyager+&quot;);&#10;    }&#10;&#10;    @FXML&#10;    private void handleCreateTrip() {&#10;        navigateToPage(&quot;TripPlanner.fxml&quot;, &quot;Create Trip - Voyager+&quot;);&#10;    }&#10;&#10;    @FXML&#10;    private void handleExpenseCalc() {&#10;        navigateToPage(&quot;ExpenseCalculator.fxml&quot;, &quot;Expense Calculator - Voyager+&quot;);&#10;    }&#10;&#10;    @FXML&#10;    private void handleNotepad() {&#10;        navigateToPage(&quot;Notepad.fxml&quot;, &quot;Notepad - Voyager+&quot;);&#10;    }&#10;&#10;    @FXML&#10;    private void handleQuizzes() {&#10;        navigateToPage(&quot;Quizzes.fxml&quot;, &quot;Quizzes - Voyager+&quot;);&#10;    }&#10;&#10;    @FXML&#10;    private void handleGames() {&#10;        navigateToPage(&quot;MiniGames.fxml&quot;, &quot;Mini Games - Voyager+&quot;);&#10;    }&#10;&#10;    private void loadNewsFeed() {&#10;        feedContainer.getChildren().clear();&#10;        posts.clear();&#10;        posts.addAll(tripService.getNewsFeed());&#10;&#10;        if (posts.isEmpty()) {&#10;            VBox emptyState = createEmptyState();&#10;            feedContainer.getChildren().add(emptyState);&#10;        } else {&#10;            for (TripPost post : posts) {&#10;                feedContainer.getChildren().add(createTripCard(post));&#10;            }&#10;        }&#10;    }&#10;&#10;    private VBox createEmptyState() {&#10;        VBox emptyBox = new VBox(15);&#10;        emptyBox.setAlignment(Pos.CENTER);&#10;        emptyBox.setPadding(new Insets(60));&#10;        emptyBox.getStyleClass().add(&quot;empty-state&quot;);&#10;&#10;        Label icon = new Label(&quot;✈️&quot;);&#10;        icon.setStyle(&quot;-fx-font-size: 64px;&quot;);&#10;&#10;        Label title = new Label(&quot;No trips yet!&quot;);&#10;        title.setStyle(&quot;-fx-font-size: 24px; -fx-font-weight: bold; -fx-text-fill: #2c3e50;&quot;);&#10;&#10;        Label subtitle = new Label(&quot;Be the first to share your travel adventure&quot;);&#10;        subtitle.setStyle(&quot;-fx-font-size: 14px; -fx-text-fill: #7f8c8d;&quot;);&#10;&#10;        Button createBtn = new Button(&quot;Create Your First Trip&quot;);&#10;        createBtn.getStyleClass().add(&quot;create-first-trip-btn&quot;);&#10;        createBtn.setOnAction(e -&gt; handleCreatePost());&#10;&#10;        emptyBox.getChildren().addAll(icon, title, subtitle, createBtn);&#10;        return emptyBox;&#10;    }&#10;&#10;    private VBox createTripCard(TripPost post) {&#10;        VBox card = new VBox(12);&#10;        card.getStyleClass().add(&quot;trip-card&quot;);&#10;        card.setPadding(new Insets(20));&#10;&#10;        // Header: User info and time&#10;        HBox header = createCardHeader(post);&#10;&#10;        // Content&#10;        Label contentLabel = new Label(post.getContent());&#10;        contentLabel.setWrapText(true);&#10;        contentLabel.getStyleClass().add(&quot;post-content&quot;);&#10;&#10;        // Trip Details Section&#10;        VBox tripDetails = createTripDetailsSection(post.getTrip());&#10;&#10;        // Activity/Stats Bar&#10;        HBox statsBar = createStatsBar(post);&#10;&#10;        // Action Buttons&#10;        HBox actions = createActionButtons(post);&#10;&#10;        // Add all sections to card&#10;        card.getChildren().addAll(header, contentLabel, tripDetails, new Separator(), statsBar, actions);&#10;&#10;        // Hover effect&#10;        card.setOnMouseEntered(e -&gt; card.setStyle(&quot;-fx-scale-x: 1.02; -fx-scale-y: 1.02;&quot;));&#10;        card.setOnMouseExited(e -&gt; card.setStyle(&quot;-fx-scale-x: 1.0; -fx-scale-y: 1.0;&quot;));&#10;&#10;        return card;&#10;    }&#10;&#10;    private HBox createCardHeader(TripPost post) {&#10;        HBox header = new HBox(12);&#10;        header.setAlignment(Pos.CENTER_LEFT);&#10;&#10;        // Avatar&#10;        Label avatarLabel = new Label(post.getAuthor().getDisplayName().substring(0, 1).toUpperCase());&#10;        avatarLabel.getStyleClass().add(&quot;avatar-circle&quot;);&#10;&#10;        // User info&#10;        VBox userInfo = new VBox(2);&#10;        Label nameLabel = new Label(post.getAuthor().getDisplayName());&#10;        nameLabel.getStyleClass().add(&quot;post-author&quot;);&#10;&#10;        Label timeLabel = new Label(post.getTimeAgo() + &quot; • &quot; + post.getTrip().getType());&#10;        timeLabel.getStyleClass().add(&quot;post-meta&quot;);&#10;&#10;        userInfo.getChildren().addAll(nameLabel, timeLabel);&#10;&#10;        // Trip type badge&#10;        Label typeBadge = new Label(post.getTrip().isGroupTrip() ? &quot; Group&quot; : &quot; Solo&quot;);&#10;        typeBadge.getStyleClass().add(&quot;trip-type-badge&quot;);&#10;        if (post.getTrip().isGroupTrip()) {&#10;            typeBadge.getStyleClass().add(&quot;group-badge&quot;);&#10;        } else {&#10;            typeBadge.getStyleClass().add(&quot;solo-badge&quot;);&#10;        }&#10;&#10;        Region spacer = new Region();&#10;        HBox.setHgrow(spacer, Priority.ALWAYS);&#10;&#10;        header.getChildren().addAll(avatarLabel, userInfo, spacer, typeBadge);&#10;        return header;&#10;    }&#10;&#10;    private VBox createTripDetailsSection(Trip trip) {&#10;        VBox detailsBox = new VBox(10);&#10;        detailsBox.getStyleClass().add(&quot;trip-details-section&quot;);&#10;        detailsBox.setPadding(new Insets(15));&#10;&#10;        // Trip title&#10;        Label titleLabel = new Label(trip.getTitle());&#10;        titleLabel.getStyleClass().add(&quot;trip-detail-title&quot;);&#10;&#10;        // Info grid&#10;        GridPane infoGrid = new GridPane();&#10;        infoGrid.setHgap(20);&#10;        infoGrid.setVgap(8);&#10;&#10;        // Route&#10;        Label routeIcon = new Label(&quot;&quot;);&#10;        Label routeLabel = new Label(trip.getRoute());&#10;        routeLabel.getStyleClass().add(&quot;trip-detail-info&quot;);&#10;&#10;        // Date&#10;        Label dateIcon = new Label(&quot;&quot;);&#10;        Label dateLabel = new Label(trip.getDate().format(DateTimeFormatter.ofPattern(&quot;MMM dd, yyyy&quot;)));&#10;        dateLabel.getStyleClass().add(&quot;trip-detail-info&quot;);&#10;&#10;        // Budget&#10;        Label budgetIcon = new Label(&quot;&quot;);&#10;        Label budgetLabel = new Label(&quot;$&quot; + String.format(&quot;%.2f&quot;, trip.getBudget()));&#10;        budgetLabel.getStyleClass().add(&quot;trip-detail-info&quot;);&#10;&#10;        // Members (for group trips)&#10;        if (trip.isGroupTrip()) {&#10;            Label membersIcon = new Label(&quot;&quot;);&#10;            Label membersLabel = new Label(trip.getApprovedMembers().size() + &quot; members&quot;);&#10;            membersLabel.getStyleClass().add(&quot;trip-detail-info&quot;);&#10;&#10;            infoGrid.add(routeIcon, 0, 0);&#10;            infoGrid.add(routeLabel, 1, 0);&#10;            infoGrid.add(dateIcon, 0, 1);&#10;            infoGrid.add(dateLabel, 1, 1);&#10;            infoGrid.add(budgetIcon, 2, 0);&#10;            infoGrid.add(budgetLabel, 3, 0);&#10;            infoGrid.add(membersIcon, 2, 1);&#10;            infoGrid.add(membersLabel, 3, 1);&#10;        } else {&#10;            infoGrid.add(routeIcon, 0, 0);&#10;            infoGrid.add(routeLabel, 1, 0);&#10;            infoGrid.add(dateIcon, 0, 1);&#10;            infoGrid.add(dateLabel, 1, 1);&#10;            infoGrid.add(budgetIcon, 2, 0);&#10;            infoGrid.add(budgetLabel, 3, 0);&#10;        }&#10;&#10;        // Description (if exists)&#10;        if (!trip.getDescription().isEmpty()) {&#10;            Label descLabel = new Label(trip.getDescription());&#10;            descLabel.setWrapText(true);&#10;            descLabel.getStyleClass().add(&quot;trip-description&quot;);&#10;            descLabel.setMaxWidth(Double.MAX_VALUE);&#10;            detailsBox.getChildren().addAll(titleLabel, infoGrid, descLabel);&#10;        } else {&#10;            detailsBox.getChildren().addAll(titleLabel, infoGrid);&#10;        }&#10;&#10;        return detailsBox;&#10;    }&#10;&#10;    private HBox createStatsBar(TripPost post) {&#10;        HBox statsBar = new HBox(20);&#10;        statsBar.setAlignment(Pos.CENTER_LEFT);&#10;        statsBar.getStyleClass().add(&quot;stats-bar&quot;);&#10;&#10;        Label likesLabel = new Label(&quot;❤ &quot; + post.getLikes() + &quot; likes&quot;);&#10;        likesLabel.getStyleClass().add(&quot;stat-label&quot;);&#10;&#10;        Label commentsLabel = new Label(&quot; &quot; + post.getComments() + &quot; comments&quot;);&#10;        commentsLabel.getStyleClass().add(&quot;stat-label&quot;);&#10;&#10;        Label sharesLabel = new Label(&quot; &quot; + post.getShares() + &quot; shares&quot;);&#10;        sharesLabel.getStyleClass().add(&quot;stat-label&quot;);&#10;&#10;        statsBar.getChildren().addAll(likesLabel, commentsLabel, sharesLabel);&#10;        return statsBar;&#10;    }&#10;&#10;    private HBox createActionButtons(TripPost post) {&#10;        HBox actions = new HBox(10);&#10;        actions.setAlignment(Pos.CENTER_LEFT);&#10;        actions.getStyleClass().add(&quot;action-buttons&quot;);&#10;&#10;        // Like button&#10;        Button likeBtn = new Button(likedPosts.getOrDefault(post.getId(), false) ? &quot;❤ Liked&quot; : &quot; Like&quot;);&#10;        likeBtn.getStyleClass().add(&quot;action-btn&quot;);&#10;        likeBtn.setOnAction(e -&gt; handleLikePost(post, likeBtn));&#10;&#10;        // Comment button&#10;        Button commentBtn = new Button(&quot; Comment&quot;);&#10;        commentBtn.getStyleClass().add(&quot;action-btn&quot;);&#10;        commentBtn.setOnAction(e -&gt; handleComment(post));&#10;&#10;        // View Trip button&#10;        Button viewBtn = new Button(&quot; View Trip&quot;);&#10;        viewBtn.getStyleClass().add(&quot;action-btn&quot;);&#10;        viewBtn.setOnAction(e -&gt; handleViewTrip(post.getTrip()));&#10;&#10;        // Join button (only for group trips)&#10;        if (post.getTrip().isGroupTrip() &amp;&amp;&#10;            !post.getTrip().getCreatorUsername().equals(tripService.getCurrentUser().getUsername())) {&#10;            Button joinBtn = new Button(&quot;✈ Request to Join&quot;);&#10;            joinBtn.getStyleClass().addAll(&quot;action-btn&quot;, &quot;action-btn-primary&quot;);&#10;            joinBtn.setOnAction(e -&gt; handleJoinTrip(post.getTrip()));&#10;            actions.getChildren().addAll(likeBtn, commentBtn, viewBtn, joinBtn);&#10;        } else {&#10;            actions.getChildren().addAll(likeBtn, commentBtn, viewBtn);&#10;        }&#10;&#10;        return actions;&#10;    }&#10;&#10;    private void handleLikePost(TripPost post, Button likeBtn) {&#10;        boolean isLiked = likedPosts.getOrDefault(post.getId(), false);&#10;&#10;        if (isLiked) {&#10;            tripService.unlikePost(post.getId());&#10;            likedPosts.put(post.getId(), false);&#10;            likeBtn.setText(&quot; Like&quot;);&#10;        } else {&#10;            tripService.likePost(post.getId());&#10;            likedPosts.put(post.getId(), true);&#10;            likeBtn.setText(&quot;❤ Liked&quot;);&#10;        }&#10;&#10;        // Refresh the feed to update like count&#10;        loadNewsFeed();&#10;    }&#10;&#10;    private void handleComment(TripPost post) {&#10;        // TODO: Implement comment functionality&#10;        showAlert(&quot;Coming Soon&quot;, &quot;Comment feature will be available soon!&quot;);&#10;    }&#10;&#10;    private void handleViewTrip(Trip trip) {&#10;        // TODO: Implement trip details view&#10;        Alert alert = new Alert(Alert.AlertType.INFORMATION);&#10;        alert.setTitle(&quot;Trip Details&quot;);&#10;        alert.setHeaderText(trip.getTitle());&#10;        alert.setContentText(&#10;            &quot;Route: &quot; + trip.getRoute() + &quot;\n&quot; +&#10;            &quot;Date: &quot; + trip.getDate() + &quot;\n&quot; +&#10;            &quot;Budget: $&quot; + String.format(&quot;%.2f&quot;, trip.getBudget()) + &quot;\n&quot; +&#10;            &quot;Type: &quot; + trip.getType() + &quot;\n&quot; +&#10;            &quot;Creator: &quot; + trip.getCreatorUsername()&#10;        );&#10;        alert.showAndWait();&#10;    }&#10;&#10;    private void handleJoinTrip(Trip trip) {&#10;        TextInputDialog dialog = new TextInputDialog();&#10;        dialog.setTitle(&quot;Request to Join&quot;);&#10;        dialog.setHeaderText(&quot;Request to join: &quot; + trip.getTitle());&#10;        dialog.setContentText(&quot;Enter your message:&quot;);&#10;&#10;        dialog.showAndWait().ifPresent(message -&gt; {&#10;            JoinRequest request = tripService.requestToJoin(trip.getId(), message);&#10;            if (request != null) {&#10;                showAlert(&quot;Request Sent&quot;, &quot;Your join request has been sent to &quot; + trip.getCreatorUsername() + &quot;!&quot;);&#10;            }&#10;        });&#10;    }&#10;&#10;    private void navigateToPage(String fxmlFile, String title) {&#10;        try {&#10;            FXMLLoader loader = new FXMLLoader(getClass().getResource(fxmlFile));&#10;            Parent root = loader.load();&#10;&#10;            Stage stage = (Stage) feedContainer.getScene().getWindow();&#10;            stage.setScene(new Scene(root, 1400, 800));&#10;            stage.setTitle(title);&#10;&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Failed to load page: &quot; + fxmlFile);&#10;            showAlert(&quot;Coming Soon&quot;, &quot;This feature is under development!&quot;);&#10;        }&#10;    }&#10;&#10;    private void showAlert(String title, String message) {&#10;        Alert alert = new Alert(Alert.AlertType.INFORMATION);&#10;        alert.setTitle(title);&#10;        alert.setHeaderText(null);&#10;        alert.setContentText(message);&#10;        alert.showAndWait();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.voyeger;&#10;&#10;import javafx.fxml.FXML;&#10;import javafx.fxml.FXMLLoader;&#10;import javafx.scene.control.*;&#10;import javafx.scene.layout.*;&#10;import javafx.collections.FXCollections;&#10;import javafx.collections.ObservableList;&#10;import javafx.geometry.Insets;&#10;import javafx.geometry.Pos;&#10;import javafx.scene.Parent;&#10;import javafx.scene.Scene;&#10;import javafx.stage.Stage;&#10;&#10;import java.time.format.DateTimeFormatter;&#10;import java.util.HashMap;&#10;import java.util.Map;&#10;&#10;public class NewsFeedController {&#10;&#10;    @FXML&#10;    private VBox feedContainer;&#10;&#10;    @FXML&#10;    private Label welcomeLabel;&#10;&#10;    @FXML&#10;    private Label tripCountLabel;&#10;&#10;    @FXML&#10;    private Label rewardPointsLabel;&#10;&#10;    @FXML&#10;    private Label upcomingTripsLabel;&#10;&#10;    @FXML&#10;    private Label communityLabel;&#10;&#10;    @FXML&#10;    private TextArea createPostArea;&#10;&#10;    @FXML&#10;    private VBox quickLinksContainer;&#10;&#10;    @FXML&#10;    private VBox notificationsContainer;&#10;&#10;    @FXML&#10;    private ScrollPane feedScrollPane;&#10;&#10;    private TripService tripService;&#10;    private ObservableList&lt;TripPost&gt; posts;&#10;    private Map&lt;String, Boolean&gt; likedPosts;&#10;&#10;    @FXML&#10;    public void initialize() {&#10;        tripService = TripService.getInstance();&#10;        posts = FXCollections.observableArrayList();&#10;        likedPosts = new HashMap&lt;&gt;();&#10;&#10;        updateWelcomeBanner();&#10;        setupQuickLinks();&#10;        loadNewsFeed();&#10;    }&#10;&#10;    private void updateWelcomeBanner() {&#10;        User currentUser = tripService.getCurrentUser();&#10;        if (currentUser != null) {&#10;            welcomeLabel.setText(&quot;Welcome, &quot; + currentUser.getDisplayName() + &quot;! &quot;);&#10;&#10;            // Update statistics&#10;            int tripCount = tripService.getUserTrips(currentUser.getUsername()).size();&#10;            tripCountLabel.setText(String.valueOf(tripCount));&#10;&#10;            // TODO: Implement reward points system&#10;            rewardPointsLabel.setText(&quot;0&quot;);&#10;&#10;            // Count upcoming trips (trips with future dates)&#10;            long upcomingCount = tripService.getUserTrips(currentUser.getUsername()).stream()&#10;                    .filter(trip -&gt; trip.getDate().isAfter(java.time.LocalDate.now()))&#10;                    .count();&#10;            upcomingTripsLabel.setText(String.valueOf(upcomingCount));&#10;&#10;            // Community count (total users or group members)&#10;            communityLabel.setText(&quot;1.2K&quot;);&#10;        } else {&#10;            welcomeLabel.setText(&quot;Welcome, Guest! &quot;);&#10;            tripCountLabel.setText(&quot;0&quot;);&#10;            rewardPointsLabel.setText(&quot;0&quot;);&#10;            upcomingTripsLabel.setText(&quot;0&quot;);&#10;            communityLabel.setText(&quot;0&quot;);&#10;        }&#10;    }&#10;&#10;    private void setupQuickLinks() {&#10;        // This would be populated from the FXML, but we can add dynamic behavior here if needed&#10;    }&#10;&#10;    @FXML&#10;    private void handleCreatePost() {&#10;        String content = createPostArea.getText().trim();&#10;        if (content.isEmpty()) {&#10;            showAlert(&quot;Empty Post&quot;, &quot;Please write something about your trip!&quot;);&#10;            return;&#10;        }&#10;&#10;        try {&#10;            FXMLLoader loader = new FXMLLoader(getClass().getResource(&quot;CreateTripDialog.fxml&quot;));&#10;            DialogPane dialogPane = loader.load();&#10;&#10;            CreateTripDialogController controller = loader.getController();&#10;&#10;            Dialog&lt;ButtonType&gt; dialog = new Dialog&lt;&gt;();&#10;            dialog.setTitle(&quot;Create Trip&quot;);&#10;            dialog.setDialogPane(dialogPane);&#10;&#10;            dialog.showAndWait().ifPresent(buttonType -&gt; {&#10;                if (buttonType.getButtonData() == ButtonBar.ButtonData.OK_DONE) {&#10;                    Trip trip = controller.getCreatedTrip();&#10;                    if (trip != null) {&#10;                        TripPost post = tripService.postTrip(trip.getId(), content);&#10;                        if (post != null) {&#10;                            createPostArea.clear();&#10;                            loadNewsFeed();&#10;                            showAlert(&quot;Success&quot;, &quot;Your trip has been posted to the news feed!&quot;);&#10;                        }&#10;                    }&#10;                }&#10;            });&#10;&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;            showAlert(&quot;Error&quot;, &quot;Failed to create trip post: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    @FXML&#10;    private void handleRefreshFeed() {&#10;        loadNewsFeed();&#10;        updateWelcomeBanner();&#10;    }&#10;&#10;    @FXML&#10;    private void handleMyTrips() {&#10;        navigateToPage(&quot;MyTrips.fxml&quot;, &quot;My Trips - Voyager+&quot;);&#10;    }&#10;&#10;    @FXML&#10;    private void handleCreateTrip() {&#10;        navigateToPage(&quot;TripPlanner.fxml&quot;, &quot;Create Trip - Voyager+&quot;);&#10;    }&#10;&#10;    @FXML&#10;    private void handleExpenseCalc() {&#10;        navigateToPage(&quot;ExpenseCalculator.fxml&quot;, &quot;Expense Calculator - Voyager+&quot;);&#10;    }&#10;&#10;    @FXML&#10;    private void handleNotepad() {&#10;        navigateToPage(&quot;Notepad.fxml&quot;, &quot;Notepad - Voyager+&quot;);&#10;    }&#10;&#10;    @FXML&#10;    private void handleQuizzes() {&#10;        navigateToPage(&quot;Quizzes.fxml&quot;, &quot;Quizzes - Voyager+&quot;);&#10;    }&#10;&#10;    @FXML&#10;    private void handleGames() {&#10;        navigateToPage(&quot;MiniGames.fxml&quot;, &quot;Mini Games - Voyager+&quot;);&#10;    }&#10;&#10;    private void loadNewsFeed() {&#10;        feedContainer.getChildren().clear();&#10;        posts.clear();&#10;        posts.addAll(tripService.getNewsFeed());&#10;&#10;        if (posts.isEmpty()) {&#10;            VBox emptyState = createEmptyState();&#10;            feedContainer.getChildren().add(emptyState);&#10;        } else {&#10;            for (TripPost post : posts) {&#10;                feedContainer.getChildren().add(createTripCard(post));&#10;            }&#10;        }&#10;    }&#10;&#10;    private VBox createEmptyState() {&#10;        VBox emptyBox = new VBox(15);&#10;        emptyBox.setAlignment(Pos.CENTER);&#10;        emptyBox.setPadding(new Insets(60));&#10;        emptyBox.getStyleClass().add(&quot;empty-state&quot;);&#10;&#10;        Label icon = new Label(&quot;✈️&quot;);&#10;        icon.setStyle(&quot;-fx-font-size: 64px;&quot;);&#10;&#10;        Label title = new Label(&quot;No trips yet!&quot;);&#10;        title.setStyle(&quot;-fx-font-size: 24px; -fx-font-weight: bold; -fx-text-fill: #2c3e50;&quot;);&#10;&#10;        Label subtitle = new Label(&quot;Be the first to share your travel adventure&quot;);&#10;        subtitle.setStyle(&quot;-fx-font-size: 14px; -fx-text-fill: #7f8c8d;&quot;);&#10;&#10;        Button createBtn = new Button(&quot;Create Your First Trip&quot;);&#10;        createBtn.getStyleClass().add(&quot;create-first-trip-btn&quot;);&#10;        createBtn.setOnAction(e -&gt; handleCreatePost());&#10;&#10;        emptyBox.getChildren().addAll(icon, title, subtitle, createBtn);&#10;        return emptyBox;&#10;    }&#10;&#10;    private VBox createTripCard(TripPost post) {&#10;        VBox card = new VBox(12);&#10;        card.getStyleClass().add(&quot;trip-card&quot;);&#10;        card.setPadding(new Insets(20));&#10;&#10;        // Header: User info and time&#10;        HBox header = createCardHeader(post);&#10;&#10;        // Content&#10;        Label contentLabel = new Label(post.getContent());&#10;        contentLabel.setWrapText(true);&#10;        contentLabel.getStyleClass().add(&quot;post-content&quot;);&#10;&#10;        // Trip Details Section&#10;        VBox tripDetails = createTripDetailsSection(post.getTrip());&#10;&#10;        // Activity/Stats Bar&#10;        HBox statsBar = createStatsBar(post);&#10;&#10;        // Action Buttons&#10;        HBox actions = createActionButtons(post);&#10;&#10;        // Add all sections to card&#10;        card.getChildren().addAll(header, contentLabel, tripDetails, new Separator(), statsBar, actions);&#10;&#10;        // Hover effect&#10;        card.setOnMouseEntered(e -&gt; card.setStyle(&quot;-fx-scale-x: 1.02; -fx-scale-y: 1.02;&quot;));&#10;        card.setOnMouseExited(e -&gt; card.setStyle(&quot;-fx-scale-x: 1.0; -fx-scale-y: 1.0;&quot;));&#10;&#10;        return card;&#10;    }&#10;&#10;    private HBox createCardHeader(TripPost post) {&#10;        HBox header = new HBox(12);&#10;        header.setAlignment(Pos.CENTER_LEFT);&#10;&#10;        // Avatar&#10;        Label avatarLabel = new Label(post.getAuthor().getDisplayName().substring(0, 1).toUpperCase());&#10;        avatarLabel.getStyleClass().add(&quot;avatar-circle&quot;);&#10;&#10;        // User info&#10;        VBox userInfo = new VBox(2);&#10;        Label nameLabel = new Label(post.getAuthor().getDisplayName());&#10;        nameLabel.getStyleClass().add(&quot;post-author&quot;);&#10;&#10;        Label timeLabel = new Label(post.getTimeAgo() + &quot; • &quot; + post.getTrip().getType());&#10;        timeLabel.getStyleClass().add(&quot;post-meta&quot;);&#10;&#10;        userInfo.getChildren().addAll(nameLabel, timeLabel);&#10;&#10;        // Trip type badge&#10;        Label typeBadge = new Label(post.getTrip().isGroupTrip() ? &quot; Group&quot; : &quot; Solo&quot;);&#10;        typeBadge.getStyleClass().add(&quot;trip-type-badge&quot;);&#10;        if (post.getTrip().isGroupTrip()) {&#10;            typeBadge.getStyleClass().add(&quot;group-badge&quot;);&#10;        } else {&#10;            typeBadge.getStyleClass().add(&quot;solo-badge&quot;);&#10;        }&#10;&#10;        Region spacer = new Region();&#10;        HBox.setHgrow(spacer, Priority.ALWAYS);&#10;&#10;        header.getChildren().addAll(avatarLabel, userInfo, spacer, typeBadge);&#10;        return header;&#10;    }&#10;&#10;    private VBox createTripDetailsSection(Trip trip) {&#10;        VBox detailsBox = new VBox(10);&#10;        detailsBox.getStyleClass().add(&quot;trip-details-section&quot;);&#10;        detailsBox.setPadding(new Insets(15));&#10;&#10;        // Trip title&#10;        Label titleLabel = new Label(trip.getTitle());&#10;        titleLabel.getStyleClass().add(&quot;trip-detail-title&quot;);&#10;&#10;        // Info grid&#10;        GridPane infoGrid = new GridPane();&#10;        infoGrid.setHgap(20);&#10;        infoGrid.setVgap(8);&#10;&#10;        // Route&#10;        Label routeIcon = new Label(&quot;&quot;);&#10;        Label routeLabel = new Label(trip.getRoute());&#10;        routeLabel.getStyleClass().add(&quot;trip-detail-info&quot;);&#10;&#10;        // Date&#10;        Label dateIcon = new Label(&quot;&quot;);&#10;        Label dateLabel = new Label(trip.getDate().format(DateTimeFormatter.ofPattern(&quot;MMM dd, yyyy&quot;)));&#10;        dateLabel.getStyleClass().add(&quot;trip-detail-info&quot;);&#10;&#10;        // Budget&#10;        Label budgetIcon = new Label(&quot;&quot;);&#10;        Label budgetLabel = new Label(&quot;$&quot; + String.format(&quot;%.2f&quot;, trip.getBudget()));&#10;        budgetLabel.getStyleClass().add(&quot;trip-detail-info&quot;);&#10;&#10;        // Members (for group trips)&#10;        if (trip.isGroupTrip()) {&#10;            Label membersIcon = new Label(&quot;&quot;);&#10;            Label membersLabel = new Label(trip.getApprovedMembers().size() + &quot; members&quot;);&#10;            membersLabel.getStyleClass().add(&quot;trip-detail-info&quot;);&#10;&#10;            infoGrid.add(routeIcon, 0, 0);&#10;            infoGrid.add(routeLabel, 1, 0);&#10;            infoGrid.add(dateIcon, 0, 1);&#10;            infoGrid.add(dateLabel, 1, 1);&#10;            infoGrid.add(budgetIcon, 2, 0);&#10;            infoGrid.add(budgetLabel, 3, 0);&#10;            infoGrid.add(membersIcon, 2, 1);&#10;            infoGrid.add(membersLabel, 3, 1);&#10;        } else {&#10;            infoGrid.add(routeIcon, 0, 0);&#10;            infoGrid.add(routeLabel, 1, 0);&#10;            infoGrid.add(dateIcon, 0, 1);&#10;            infoGrid.add(dateLabel, 1, 1);&#10;            infoGrid.add(budgetIcon, 2, 0);&#10;            infoGrid.add(budgetLabel, 3, 0);&#10;        }&#10;&#10;        // Description (if exists)&#10;        if (!trip.getDescription().isEmpty()) {&#10;            Label descLabel = new Label(trip.getDescription());&#10;            descLabel.setWrapText(true);&#10;            descLabel.getStyleClass().add(&quot;trip-description&quot;);&#10;            descLabel.setMaxWidth(Double.MAX_VALUE);&#10;            detailsBox.getChildren().addAll(titleLabel, infoGrid, descLabel);&#10;        } else {&#10;            detailsBox.getChildren().addAll(titleLabel, infoGrid);&#10;        }&#10;&#10;        return detailsBox;&#10;    }&#10;&#10;    private HBox createStatsBar(TripPost post) {&#10;        HBox statsBar = new HBox(20);&#10;        statsBar.setAlignment(Pos.CENTER_LEFT);&#10;        statsBar.getStyleClass().add(&quot;stats-bar&quot;);&#10;&#10;        Label likesLabel = new Label(&quot;❤ &quot; + post.getLikes() + &quot; likes&quot;);&#10;        likesLabel.getStyleClass().add(&quot;stat-label&quot;);&#10;&#10;        Label commentsLabel = new Label(&quot; &quot; + post.getComments() + &quot; comments&quot;);&#10;        commentsLabel.getStyleClass().add(&quot;stat-label&quot;);&#10;&#10;        Label sharesLabel = new Label(&quot; &quot; + post.getShares() + &quot; shares&quot;);&#10;        sharesLabel.getStyleClass().add(&quot;stat-label&quot;);&#10;&#10;        statsBar.getChildren().addAll(likesLabel, commentsLabel, sharesLabel);&#10;        return statsBar;&#10;    }&#10;&#10;    private HBox createActionButtons(TripPost post) {&#10;        HBox actions = new HBox(10);&#10;        actions.setAlignment(Pos.CENTER_LEFT);&#10;        actions.getStyleClass().add(&quot;action-buttons&quot;);&#10;&#10;        // Like button&#10;        Button likeBtn = new Button(likedPosts.getOrDefault(post.getId(), false) ? &quot;❤ Liked&quot; : &quot; Like&quot;);&#10;        likeBtn.getStyleClass().add(&quot;action-btn&quot;);&#10;        likeBtn.setOnAction(e -&gt; handleLikePost(post, likeBtn));&#10;&#10;        // Comment button&#10;        Button commentBtn = new Button(&quot; Comment&quot;);&#10;        commentBtn.getStyleClass().add(&quot;action-btn&quot;);&#10;        commentBtn.setOnAction(e -&gt; handleComment(post));&#10;&#10;        // View Trip button&#10;        Button viewBtn = new Button(&quot; View Trip&quot;);&#10;        viewBtn.getStyleClass().add(&quot;action-btn&quot;);&#10;        viewBtn.setOnAction(e -&gt; handleViewTrip(post.getTrip()));&#10;&#10;        // Join button (only for group trips)&#10;        if (post.getTrip().isGroupTrip() &amp;&amp;&#10;            !post.getTrip().getCreatorUsername().equals(tripService.getCurrentUser().getUsername())) {&#10;            Button joinBtn = new Button(&quot;✈ Request to Join&quot;);&#10;            joinBtn.getStyleClass().addAll(&quot;action-btn&quot;, &quot;action-btn-primary&quot;);&#10;            joinBtn.setOnAction(e -&gt; handleJoinTrip(post.getTrip()));&#10;            actions.getChildren().addAll(likeBtn, commentBtn, viewBtn, joinBtn);&#10;        } else {&#10;            actions.getChildren().addAll(likeBtn, commentBtn, viewBtn);&#10;        }&#10;&#10;        return actions;&#10;    }&#10;&#10;    private void handleLikePost(TripPost post, Button likeBtn) {&#10;        boolean isLiked = likedPosts.getOrDefault(post.getId(), false);&#10;&#10;        if (isLiked) {&#10;            tripService.unlikePost(post.getId());&#10;            likedPosts.put(post.getId(), false);&#10;            likeBtn.setText(&quot; Like&quot;);&#10;        } else {&#10;            tripService.likePost(post.getId());&#10;            likedPosts.put(post.getId(), true);&#10;            likeBtn.setText(&quot;❤ Liked&quot;);&#10;        }&#10;&#10;        // Refresh the feed to update like count&#10;        loadNewsFeed();&#10;    }&#10;&#10;    private void handleComment(TripPost post) {&#10;        // TODO: Implement comment functionality&#10;        showAlert(&quot;Coming Soon&quot;, &quot;Comment feature will be available soon!&quot;);&#10;    }&#10;&#10;    private void handleViewTrip(Trip trip) {&#10;        // TODO: Implement trip details view&#10;        Alert alert = new Alert(Alert.AlertType.INFORMATION);&#10;        alert.setTitle(&quot;Trip Details&quot;);&#10;        alert.setHeaderText(trip.getTitle());&#10;        alert.setContentText(&#10;            &quot;Route: &quot; + trip.getRoute() + &quot;\n&quot; +&#10;            &quot;Date: &quot; + trip.getDate() + &quot;\n&quot; +&#10;            &quot;Budget: $&quot; + String.format(&quot;%.2f&quot;, trip.getBudget()) + &quot;\n&quot; +&#10;            &quot;Type: &quot; + trip.getType() + &quot;\n&quot; +&#10;            &quot;Creator: &quot; + trip.getCreatorUsername()&#10;        );&#10;        alert.showAndWait();&#10;    }&#10;&#10;    private void handleJoinTrip(Trip trip) {&#10;        TextInputDialog dialog = new TextInputDialog();&#10;        dialog.setTitle(&quot;Request to Join&quot;);&#10;        dialog.setHeaderText(&quot;Request to join: &quot; + trip.getTitle());&#10;        dialog.setContentText(&quot;Enter your message:&quot;);&#10;&#10;        dialog.showAndWait().ifPresent(message -&gt; {&#10;            JoinRequest request = tripService.requestToJoin(trip.getId(), message);&#10;            if (request != null) {&#10;                showAlert(&quot;Request Sent&quot;, &quot;Your join request has been sent to &quot; + trip.getCreatorUsername() + &quot;!&quot;);&#10;            }&#10;        });&#10;    }&#10;&#10;    private void navigateToPage(String fxmlFile, String title) {&#10;        try {&#10;            FXMLLoader loader = new FXMLLoader(getClass().getResource(fxmlFile));&#10;            Parent root = loader.load();&#10;&#10;            Stage stage = (Stage) feedContainer.getScene().getWindow();&#10;            stage.setScene(new Scene(root, 1400, 800));&#10;            stage.setTitle(title);&#10;            stage.setResizable(true);&#10;            stage.setMaximized(true);&#10;&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Failed to load page: &quot; + fxmlFile);&#10;            showAlert(&quot;Coming Soon&quot;, &quot;This feature is under development!&quot;);&#10;        }&#10;    }&#10;&#10;    private void showAlert(String title, String message) {&#10;        Alert alert = new Alert(Alert.AlertType.INFORMATION);&#10;        alert.setTitle(title);&#10;        alert.setHeaderText(null);&#10;        alert.setContentText(message);&#10;        alert.showAndWait();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/voyeger/SignInController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/voyeger/SignInController.java" />
              <option name="originalContent" value="package com.example.voyeger;&#10;&#10;import javafx.fxml.FXML;&#10;import javafx.fxml.FXMLLoader;&#10;import javafx.scene.Scene;&#10;import javafx.scene.control.*;&#10;import javafx.stage.Stage;&#10;import javafx.scene.Node;&#10;import javafx.event.ActionEvent;&#10;&#10;public class SignInController {&#10;&#10;    @FXML&#10;    private TextField usernameField;&#10;&#10;    @FXML&#10;    private PasswordField passwordField;&#10;&#10;    @FXML&#10;    private Label statusLabel;&#10;&#10;    @FXML&#10;    private ProgressIndicator loadingIndicator;&#10;&#10;    @FXML&#10;    private CheckBox rememberMeCheckBox;&#10;&#10;    private DatabaseManager dbManager;&#10;&#10;    @FXML&#10;    public void initialize() {&#10;        dbManager = DatabaseManager.getInstance();&#10;        if (loadingIndicator != null) {&#10;            loadingIndicator.setVisible(false);&#10;        }&#10;    }&#10;&#10;    @FXML&#10;    private void handleSignIn(ActionEvent event) {&#10;        // Clear previous status&#10;        statusLabel.setText(&quot;&quot;);&#10;        statusLabel.setStyle(&quot;&quot;);&#10;&#10;        // Get input values&#10;        String usernameOrEmail = usernameField.getText().trim();&#10;        String password = passwordField.getText();&#10;&#10;        // Validation&#10;        if (usernameOrEmail.isEmpty() || password.isEmpty()) {&#10;            showError(&quot;⚠ Please enter username/email and password!&quot;);&#10;            return;&#10;        }&#10;&#10;        // Show loading&#10;        loadingIndicator.setVisible(true);&#10;&#10;        // Login in background thread&#10;        new Thread(() -&gt; {&#10;            User user = dbManager.loginUser(usernameOrEmail, password);&#10;&#10;            // Update UI on JavaFX thread&#10;            javafx.application.Platform.runLater(() -&gt; {&#10;                loadingIndicator.setVisible(false);&#10;&#10;                if (user != null) {&#10;                    showSuccess(&quot;✅ Login successful! Welcome &quot; + user.getDisplayName());&#10;&#10;                    // Set current user in TripService&#10;                    TripService.getInstance().setCurrentUser(user);&#10;&#10;                    // Wait 1 second then navigate to main app&#10;                    new Thread(() -&gt; {&#10;                        try {&#10;                            Thread.sleep(1000);&#10;                            javafx.application.Platform.runLater(() -&gt; navigateToMainApp(event));&#10;                        } catch (InterruptedException e) {&#10;                            e.printStackTrace();&#10;                        }&#10;                    }).start();&#10;&#10;                } else {&#10;                    showError(&quot;❌ Invalid username/email or password!&quot;);&#10;                }&#10;            });&#10;        }).start();&#10;    }&#10;&#10;    @FXML&#10;    private void handleBackToWelcome(ActionEvent event) {&#10;        navigateToWelcome(event);&#10;    }&#10;&#10;    @FXML&#10;    private void handleGoToSignUp(ActionEvent event) {&#10;        navigateToSignUp(event);&#10;    }&#10;&#10;    private void navigateToWelcome(ActionEvent event) {&#10;        try {&#10;            FXMLLoader loader = new FXMLLoader(getClass().getResource(&quot;Welcome.fxml&quot;));&#10;            Scene scene = new Scene(loader.load(), 1400, 800);&#10;&#10;            Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();&#10;            stage.setScene(scene);&#10;            stage.setTitle(&quot;Voyager+ - Welcome&quot;);&#10;&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;&#10;    private void navigateToSignUp(ActionEvent event) {&#10;        try {&#10;            FXMLLoader loader = new FXMLLoader(getClass().getResource(&quot;SignUp.fxml&quot;));&#10;            Scene scene = new Scene(loader.load(), 1000, 700);&#10;&#10;            Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();&#10;            stage.setScene(scene);&#10;            stage.setTitle(&quot;Voyager+ - Sign Up&quot;);&#10;&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;&#10;    private void navigateToMainApp(ActionEvent event) {&#10;        try {&#10;            FXMLLoader loader = new FXMLLoader(getClass().getResource(&quot;Main.fxml&quot;));&#10;            Scene scene = new Scene(loader.load(), 1400, 800);&#10;&#10;            Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();&#10;            stage.setScene(scene);&#10;            stage.setTitle(&quot;Voyager+ - Travel Together&quot;);&#10;&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;&#10;    private void showError(String message) {&#10;        statusLabel.setText(message);&#10;        statusLabel.setStyle(&quot;-fx-text-fill: #e74c3c; -fx-font-size: 14px; -fx-font-weight: bold;&quot;);&#10;    }&#10;&#10;    private void showSuccess(String message) {&#10;        statusLabel.setText(message);&#10;        statusLabel.setStyle(&quot;-fx-text-fill: #27ae60; -fx-font-size: 14px; -fx-font-weight: bold;&quot;);&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.example.voyeger;&#10;&#10;import javafx.fxml.FXML;&#10;import javafx.fxml.FXMLLoader;&#10;import javafx.scene.Scene;&#10;import javafx.scene.control.*;&#10;import javafx.stage.Stage;&#10;import javafx.scene.Node;&#10;import javafx.event.ActionEvent;&#10;&#10;public class SignInController {&#10;&#10;    @FXML&#10;    private TextField usernameField;&#10;&#10;    @FXML&#10;    private PasswordField passwordField;&#10;&#10;    @FXML&#10;    private Label statusLabel;&#10;&#10;    @FXML&#10;    private ProgressIndicator loadingIndicator;&#10;&#10;    @FXML&#10;    private CheckBox rememberMeCheckBox;&#10;&#10;    private DatabaseManager dbManager;&#10;&#10;    @FXML&#10;    public void initialize() {&#10;        dbManager = DatabaseManager.getInstance();&#10;        if (loadingIndicator != null) {&#10;            loadingIndicator.setVisible(false);&#10;        }&#10;    }&#10;&#10;    @FXML&#10;    private void handleSignIn(ActionEvent event) {&#10;        // Clear previous status&#10;        statusLabel.setText(&quot;&quot;);&#10;        statusLabel.setStyle(&quot;&quot;);&#10;&#10;        // Get input values&#10;        String usernameOrEmail = usernameField.getText().trim();&#10;        String password = passwordField.getText();&#10;&#10;        // Validation&#10;        if (usernameOrEmail.isEmpty() || password.isEmpty()) {&#10;            showError(&quot;⚠ Please enter username/email and password!&quot;);&#10;            return;&#10;        }&#10;&#10;        // Show loading&#10;        loadingIndicator.setVisible(true);&#10;&#10;        // Login in background thread&#10;        new Thread(() -&gt; {&#10;            User user = dbManager.loginUser(usernameOrEmail, password);&#10;&#10;            // Update UI on JavaFX thread&#10;            javafx.application.Platform.runLater(() -&gt; {&#10;                loadingIndicator.setVisible(false);&#10;&#10;                if (user != null) {&#10;                    showSuccess(&quot;✅ Login successful! Welcome &quot; + user.getDisplayName());&#10;&#10;                    // Set current user in TripService&#10;                    TripService.getInstance().setCurrentUser(user);&#10;&#10;                    // Wait 1 second then navigate to main app&#10;                    new Thread(() -&gt; {&#10;                        try {&#10;                            Thread.sleep(1000);&#10;                            javafx.application.Platform.runLater(() -&gt; navigateToMainApp(event));&#10;                        } catch (InterruptedException e) {&#10;                            e.printStackTrace();&#10;                        }&#10;                    }).start();&#10;&#10;                } else {&#10;                    showError(&quot;❌ Invalid username/email or password!&quot;);&#10;                }&#10;            });&#10;        }).start();&#10;    }&#10;&#10;    @FXML&#10;    private void handleBackToWelcome(ActionEvent event) {&#10;        navigateToWelcome(event);&#10;    }&#10;&#10;    @FXML&#10;    private void handleGoToSignUp(ActionEvent event) {&#10;        navigateToSignUp(event);&#10;    }&#10;&#10;    private void navigateToWelcome(ActionEvent event) {&#10;        try {&#10;            FXMLLoader loader = new FXMLLoader(getClass().getResource(&quot;Welcome.fxml&quot;));&#10;            Scene scene = new Scene(loader.load(), 1400, 800);&#10;&#10;            Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();&#10;            stage.setScene(scene);&#10;            stage.setTitle(&quot;Voyager+ - Welcome&quot;);&#10;            stage.setResizable(true);&#10;            stage.setMaximized(true);&#10;&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;&#10;    private void navigateToSignUp(ActionEvent event) {&#10;        try {&#10;            FXMLLoader loader = new FXMLLoader(getClass().getResource(&quot;SignUp.fxml&quot;));&#10;            Scene scene = new Scene(loader.load(), 1000, 700);&#10;&#10;            Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();&#10;            stage.setScene(scene);&#10;            stage.setTitle(&quot;Voyager+ - Sign Up&quot;);&#10;            stage.setResizable(true);&#10;            stage.setMaximized(true);&#10;&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;&#10;    private void navigateToMainApp(ActionEvent event) {&#10;        try {&#10;            FXMLLoader loader = new FXMLLoader(getClass().getResource(&quot;Main.fxml&quot;));&#10;            Scene scene = new Scene(loader.load(), 1400, 800);&#10;&#10;            Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();&#10;            stage.setScene(scene);&#10;            stage.setTitle(&quot;Voyager+ - Travel Together&quot;);&#10;            stage.setResizable(true);&#10;            stage.setMaximized(true);&#10;&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;&#10;    private void showError(String message) {&#10;        statusLabel.setText(message);&#10;        statusLabel.setStyle(&quot;-fx-text-fill: #e74c3c; -fx-font-size: 14px; -fx-font-weight: bold;&quot;);&#10;    }&#10;&#10;    private void showSuccess(String message) {&#10;        statusLabel.setText(message);&#10;        statusLabel.setStyle(&quot;-fx-text-fill: #27ae60; -fx-font-size: 14px; -fx-font-weight: bold;&quot;);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/voyeger/SignUpController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/voyeger/SignUpController.java" />
              <option name="originalContent" value="package com.example.voyeger;&#10;&#10;import javafx.fxml.FXML;&#10;import javafx.fxml.FXMLLoader;&#10;import javafx.scene.Scene;&#10;import javafx.scene.control.*;&#10;import javafx.stage.Stage;&#10;import javafx.scene.Node;&#10;import javafx.event.ActionEvent;&#10;&#10;public class SignUpController {&#10;&#10;    @FXML&#10;    private TextField usernameField;&#10;&#10;    @FXML&#10;    private TextField fullNameField;&#10;&#10;    @FXML&#10;    private TextField emailField;&#10;&#10;    @FXML&#10;    private PasswordField passwordField;&#10;&#10;    @FXML&#10;    private PasswordField confirmPasswordField;&#10;&#10;    @FXML&#10;    private Label statusLabel;&#10;&#10;    @FXML&#10;    private ProgressIndicator loadingIndicator;&#10;&#10;    private DatabaseManager dbManager;&#10;&#10;    @FXML&#10;    public void initialize() {&#10;        dbManager = DatabaseManager.getInstance();&#10;        if (loadingIndicator != null) {&#10;            loadingIndicator.setVisible(false);&#10;        }&#10;    }&#10;&#10;    @FXML&#10;    private void handleSignUp(ActionEvent event) {&#10;        // Clear previous status&#10;        statusLabel.setText(&quot;&quot;);&#10;        statusLabel.setStyle(&quot;&quot;);&#10;&#10;        // Get input values&#10;        String username = usernameField.getText().trim();&#10;        String fullName = fullNameField.getText().trim();&#10;        String email = emailField.getText().trim();&#10;        String password = passwordField.getText();&#10;        String confirmPassword = confirmPasswordField.getText();&#10;&#10;        // Validation&#10;        if (username.isEmpty() || fullName.isEmpty() || email.isEmpty() || password.isEmpty()) {&#10;            showError(&quot;⚠ All fields are required!&quot;);&#10;            return;&#10;        }&#10;&#10;        if (username.length() &lt; 3) {&#10;            showError(&quot;⚠ Username must be at least 3 characters!&quot;);&#10;            return;&#10;        }&#10;&#10;        if (!username.matches(&quot;^[a-zA-Z0-9_]+$&quot;)) {&#10;            showError(&quot;⚠ Username can only contain letters, numbers, and underscores!&quot;);&#10;            return;&#10;        }&#10;&#10;        if (!email.matches(&quot;^[A-Za-z0-9+_.-]+@(.+)$&quot;)) {&#10;            showError(&quot;⚠ Please enter a valid email address!&quot;);&#10;            return;&#10;        }&#10;&#10;        if (password.length() &lt; 6) {&#10;            showError(&quot;⚠ Password must be at least 6 characters!&quot;);&#10;            return;&#10;        }&#10;&#10;        if (!password.equals(confirmPassword)) {&#10;            showError(&quot;⚠ Passwords do not match!&quot;);&#10;            return;&#10;        }&#10;&#10;        // Show loading&#10;        loadingIndicator.setVisible(true);&#10;&#10;        // Register user in background thread&#10;        new Thread(() -&gt; {&#10;            boolean success = dbManager.registerUser(username, email, password, fullName);&#10;&#10;            // Update UI on JavaFX thread&#10;            javafx.application.Platform.runLater(() -&gt; {&#10;                loadingIndicator.setVisible(false);&#10;&#10;                if (success) {&#10;                    showSuccess(&quot;✅ Registration successful! Redirecting to login...&quot;);&#10;&#10;                    // Wait 2 seconds then navigate to sign in&#10;                    new Thread(() -&gt; {&#10;                        try {&#10;                            Thread.sleep(2000);&#10;                            javafx.application.Platform.runLater(() -&gt; navigateToSignIn(event));&#10;                        } catch (InterruptedException e) {&#10;                            e.printStackTrace();&#10;                        }&#10;                    }).start();&#10;&#10;                } else {&#10;                    showError(&quot;❌ Registration failed! Username or email already exists.&quot;);&#10;                }&#10;            });&#10;        }).start();&#10;    }&#10;&#10;    @FXML&#10;    private void handleBackToWelcome(ActionEvent event) {&#10;        navigateToWelcome(event);&#10;    }&#10;&#10;    @FXML&#10;    private void handleGoToSignIn(ActionEvent event) {&#10;        navigateToSignIn(event);&#10;    }&#10;&#10;    private void navigateToWelcome(ActionEvent event) {&#10;        try {&#10;            FXMLLoader loader = new FXMLLoader(getClass().getResource(&quot;Welcome.fxml&quot;));&#10;            Scene scene = new Scene(loader.load(), 1400, 800);&#10;&#10;            Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();&#10;            stage.setScene(scene);&#10;            stage.setTitle(&quot;Voyager+ - Welcome&quot;);&#10;&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;&#10;    private void navigateToSignIn(ActionEvent event) {&#10;        try {&#10;            FXMLLoader loader = new FXMLLoader(getClass().getResource(&quot;SignIn.fxml&quot;));&#10;            Scene scene = new Scene(loader.load(), 1000, 700);&#10;&#10;            Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();&#10;            stage.setScene(scene);&#10;            stage.setTitle(&quot;Voyager+ - Sign In&quot;);&#10;&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;&#10;    private void showError(String message) {&#10;        statusLabel.setText(message);&#10;        statusLabel.setStyle(&quot;-fx-text-fill: #e74c3c; -fx-font-size: 14px; -fx-font-weight: bold;&quot;);&#10;    }&#10;&#10;    private void showSuccess(String message) {&#10;        statusLabel.setText(message);&#10;        statusLabel.setStyle(&quot;-fx-text-fill: #27ae60; -fx-font-size: 14px; -fx-font-weight: bold;&quot;);&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.example.voyeger;&#10;&#10;import javafx.fxml.FXML;&#10;import javafx.fxml.FXMLLoader;&#10;import javafx.scene.Scene;&#10;import javafx.scene.control.*;&#10;import javafx.stage.Stage;&#10;import javafx.scene.Node;&#10;import javafx.event.ActionEvent;&#10;&#10;public class SignUpController {&#10;&#10;    @FXML&#10;    private TextField usernameField;&#10;&#10;    @FXML&#10;    private TextField fullNameField;&#10;&#10;    @FXML&#10;    private TextField emailField;&#10;&#10;    @FXML&#10;    private PasswordField passwordField;&#10;&#10;    @FXML&#10;    private PasswordField confirmPasswordField;&#10;&#10;    @FXML&#10;    private Label statusLabel;&#10;&#10;    @FXML&#10;    private ProgressIndicator loadingIndicator;&#10;&#10;    private DatabaseManager dbManager;&#10;&#10;    @FXML&#10;    public void initialize() {&#10;        dbManager = DatabaseManager.getInstance();&#10;        if (loadingIndicator != null) {&#10;            loadingIndicator.setVisible(false);&#10;        }&#10;    }&#10;&#10;    @FXML&#10;    private void handleSignUp(ActionEvent event) {&#10;        // Clear previous status&#10;        statusLabel.setText(&quot;&quot;);&#10;        statusLabel.setStyle(&quot;&quot;);&#10;&#10;        // Get input values&#10;        String username = usernameField.getText().trim();&#10;        String fullName = fullNameField.getText().trim();&#10;        String email = emailField.getText().trim();&#10;        String password = passwordField.getText();&#10;        String confirmPassword = confirmPasswordField.getText();&#10;&#10;        // Validation&#10;        if (username.isEmpty() || fullName.isEmpty() || email.isEmpty() || password.isEmpty()) {&#10;            showError(&quot;⚠ All fields are required!&quot;);&#10;            return;&#10;        }&#10;&#10;        if (username.length() &lt; 3) {&#10;            showError(&quot;⚠ Username must be at least 3 characters!&quot;);&#10;            return;&#10;        }&#10;&#10;        if (!username.matches(&quot;^[a-zA-Z0-9_]+$&quot;)) {&#10;            showError(&quot;⚠ Username can only contain letters, numbers, and underscores!&quot;);&#10;            return;&#10;        }&#10;&#10;        if (!email.matches(&quot;^[A-Za-z0-9+_.-]+@(.+)$&quot;)) {&#10;            showError(&quot;⚠ Please enter a valid email address!&quot;);&#10;            return;&#10;        }&#10;&#10;        if (password.length() &lt; 6) {&#10;            showError(&quot;⚠ Password must be at least 6 characters!&quot;);&#10;            return;&#10;        }&#10;&#10;        if (!password.equals(confirmPassword)) {&#10;            showError(&quot;⚠ Passwords do not match!&quot;);&#10;            return;&#10;        }&#10;&#10;        // Show loading&#10;        loadingIndicator.setVisible(true);&#10;&#10;        // Register user in background thread&#10;        new Thread(() -&gt; {&#10;            boolean success = dbManager.registerUser(username, email, password, fullName);&#10;&#10;            // Update UI on JavaFX thread&#10;            javafx.application.Platform.runLater(() -&gt; {&#10;                loadingIndicator.setVisible(false);&#10;&#10;                if (success) {&#10;                    showSuccess(&quot;✅ Registration successful! Redirecting to login...&quot;);&#10;&#10;                    // Wait 2 seconds then navigate to sign in&#10;                    new Thread(() -&gt; {&#10;                        try {&#10;                            Thread.sleep(2000);&#10;                            javafx.application.Platform.runLater(() -&gt; navigateToSignIn(event));&#10;                        } catch (InterruptedException e) {&#10;                            e.printStackTrace();&#10;                        }&#10;                    }).start();&#10;&#10;                } else {&#10;                    showError(&quot;❌ Registration failed! Username or email already exists.&quot;);&#10;                }&#10;            });&#10;        }).start();&#10;    }&#10;&#10;    @FXML&#10;    private void handleBackToWelcome(ActionEvent event) {&#10;        navigateToWelcome(event);&#10;    }&#10;&#10;    @FXML&#10;    private void handleGoToSignIn(ActionEvent event) {&#10;        navigateToSignIn(event);&#10;    }&#10;&#10;    private void navigateToWelcome(ActionEvent event) {&#10;        try {&#10;            FXMLLoader loader = new FXMLLoader(getClass().getResource(&quot;Welcome.fxml&quot;));&#10;            Scene scene = new Scene(loader.load(), 1400, 800);&#10;&#10;            Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();&#10;            stage.setScene(scene);&#10;            stage.setTitle(&quot;Voyager+ - Welcome&quot;);&#10;            stage.setResizable(true);&#10;            stage.setMaximized(true);&#10;&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;&#10;    private void navigateToSignIn(ActionEvent event) {&#10;        try {&#10;            FXMLLoader loader = new FXMLLoader(getClass().getResource(&quot;SignIn.fxml&quot;));&#10;            Scene scene = new Scene(loader.load(), 1000, 700);&#10;&#10;            Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();&#10;            stage.setScene(scene);&#10;            stage.setTitle(&quot;Voyager+ - Sign In&quot;);&#10;            stage.setResizable(true);&#10;            stage.setMaximized(true);&#10;&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;&#10;    private void showError(String message) {&#10;        statusLabel.setText(message);&#10;        statusLabel.setStyle(&quot;-fx-text-fill: #e74c3c; -fx-font-size: 14px; -fx-font-weight: bold;&quot;);&#10;    }&#10;&#10;    private void showSuccess(String message) {&#10;        statusLabel.setText(message);&#10;        statusLabel.setStyle(&quot;-fx-text-fill: #27ae60; -fx-font-size: 14px; -fx-font-weight: bold;&quot;);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/voyeger/TripPlannerController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/voyeger/TripPlannerController.java" />
              <option name="originalContent" value="package com.example.voyeger;&#10;&#10;import javafx.fxml.FXML;&#10;import javafx.fxml.FXMLLoader;&#10;import javafx.scene.Parent;&#10;import javafx.scene.Scene;&#10;import javafx.scene.control.*;&#10;import javafx.stage.Stage;&#10;import javafx.collections.FXCollections;&#10;import javafx.collections.ObservableList;&#10;&#10;public class TripPlannerController {&#10;&#10;    @FXML&#10;    private TextField titleField, routeField, budgetField;&#10;&#10;    @FXML&#10;    private TextArea descriptionArea;&#10;&#10;    @FXML&#10;    private DatePicker datePicker;&#10;&#10;    @FXML&#10;    private RadioButton soloTripRadio, groupTripRadio;&#10;&#10;    @FXML&#10;    private Label statusLabel;&#10;&#10;    @FXML&#10;    private ListView&lt;Trip&gt; myTripsListView;&#10;&#10;    @FXML&#10;    private ListView&lt;Trip&gt; availableTripsListView;&#10;&#10;    @FXML&#10;    private TextArea tripDetailsArea;&#10;&#10;    @FXML&#10;    private TextArea postContentArea;&#10;&#10;    private TripService tripService;&#10;    private ObservableList&lt;Trip&gt; myTrips;&#10;    private ObservableList&lt;Trip&gt; availableTrips;&#10;&#10;    @FXML&#10;    public void initialize() {&#10;        tripService = TripService.getInstance();&#10;        myTrips = FXCollections.observableArrayList();&#10;        availableTrips = FXCollections.observableArrayList();&#10;&#10;        if (myTripsListView != null) {&#10;            myTripsListView.setItems(myTrips);&#10;            myTripsListView.setCellFactory(lv -&gt; new TripListCell());&#10;            myTripsListView.getSelectionModel().selectedItemProperty().addListener(&#10;                (obs, oldVal, newVal) -&gt; displayTripDetails(newVal)&#10;            );&#10;        }&#10;&#10;        if (availableTripsListView != null) {&#10;            availableTripsListView.setItems(availableTrips);&#10;            availableTripsListView.setCellFactory(lv -&gt; new TripListCell());&#10;            availableTripsListView.getSelectionModel().selectedItemProperty().addListener(&#10;                (obs, oldVal, newVal) -&gt; displayTripDetails(newVal)&#10;            );&#10;        }&#10;&#10;        refreshTrips();&#10;    }&#10;&#10;    @FXML&#10;    private void handleCreateTrip() {&#10;        String title = titleField.getText().trim();&#10;        String route = routeField.getText().trim();&#10;        String budgetStr = budgetField.getText().trim();&#10;        String description = descriptionArea.getText().trim();&#10;        Trip.TripType type = soloTripRadio.isSelected() ? Trip.TripType.SOLO : Trip.TripType.GROUP;&#10;&#10;        if (title.isEmpty() || route.isEmpty() || budgetStr.isEmpty() || datePicker.getValue() == null) {&#10;            statusLabel.setText(&quot;⚠ Please fill in all required fields!&quot;);&#10;            statusLabel.setStyle(&quot;-fx-text-fill: red;&quot;);&#10;            return;&#10;        }&#10;&#10;        try {&#10;            double budget = Double.parseDouble(budgetStr);&#10;            Trip trip = tripService.createTrip(title, datePicker.getValue(), route, budget, description, type);&#10;&#10;            // Create post content&#10;            String postContent = postContentArea != null &amp;&amp; !postContentArea.getText().trim().isEmpty()&#10;                ? postContentArea.getText().trim()&#10;                : &quot;Check out my new &quot; + type.toString().toLowerCase() + &quot; trip!&quot;;&#10;&#10;            tripService.postTrip(trip.getId(), postContent);&#10;&#10;            statusLabel.setText(&quot;✅ &quot; + type + &quot; trip created and posted to news feed!&quot;);&#10;            statusLabel.setStyle(&quot;-fx-text-fill: green;&quot;);&#10;&#10;            clearForm();&#10;            refreshTrips();&#10;&#10;        } catch (NumberFormatException e) {&#10;            statusLabel.setText(&quot;⚠ Invalid budget format!&quot;);&#10;            statusLabel.setStyle(&quot;-fx-text-fill: red;&quot;);&#10;        }&#10;    }&#10;&#10;    @FXML&#10;    private void handleRequestToJoin() {&#10;        Trip selectedTrip = availableTripsListView.getSelectionModel().getSelectedItem();&#10;        if (selectedTrip == null) {&#10;            showAlert(&quot;No Selection&quot;, &quot;Please select a trip to join.&quot;);&#10;            return;&#10;        }&#10;&#10;        if (!selectedTrip.isGroupTrip()) {&#10;            showAlert(&quot;Cannot Join&quot;, &quot;This is a solo trip. You cannot request to join.&quot;);&#10;            return;&#10;        }&#10;&#10;        if (selectedTrip.getCreatorUsername().equals(tripService.getCurrentUser().getUsername())) {&#10;            showAlert(&quot;Cannot Join&quot;, &quot;You are the creator of this trip.&quot;);&#10;            return;&#10;        }&#10;&#10;        TextInputDialog dialog = new TextInputDialog();&#10;        dialog.setTitle(&quot;Request to Join&quot;);&#10;        dialog.setHeaderText(&quot;Request to join: &quot; + selectedTrip.getTitle());&#10;        dialog.setContentText(&quot;Enter a message:&quot;);&#10;&#10;        dialog.showAndWait().ifPresent(message -&gt; {&#10;            JoinRequest request = tripService.requestToJoin(selectedTrip.getId(), message);&#10;            if (request != null) {&#10;                showAlert(&quot;Request Sent&quot;, &quot;Your join request has been sent to the trip creator!&quot;);&#10;            }&#10;        });&#10;    }&#10;&#10;    @FXML&#10;    private void handleManageRequests() {&#10;        Trip selectedTrip = myTripsListView.getSelectionModel().getSelectedItem();&#10;        if (selectedTrip == null) {&#10;            showAlert(&quot;No Selection&quot;, &quot;Please select one of your trips to manage requests.&quot;);&#10;            return;&#10;        }&#10;&#10;        if (!selectedTrip.isGroupTrip()) {&#10;            showAlert(&quot;Solo Trip&quot;, &quot;This is a solo trip. There are no join requests.&quot;);&#10;            return;&#10;        }&#10;&#10;        try {&#10;            FXMLLoader loader = new FXMLLoader(getClass().getResource(&quot;ManageRequests.fxml&quot;));&#10;            Parent root = loader.load();&#10;&#10;            ManageRequestsController controller = loader.getController();&#10;            controller.setTrip(selectedTrip);&#10;&#10;            Stage stage = new Stage();&#10;            stage.setTitle(&quot;Manage Join Requests - &quot; + selectedTrip.getTitle());&#10;            stage.setScene(new Scene(root, 600, 400));&#10;            stage.show();&#10;&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;            showAlert(&quot;Error&quot;, &quot;Failed to open request management: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    @FXML&#10;    private void handleRefresh() {&#10;        refreshTrips();&#10;        statusLabel.setText(&quot;✅ Refreshed!&quot;);&#10;        statusLabel.setStyle(&quot;-fx-text-fill: green;&quot;);&#10;    }&#10;&#10;    private void refreshTrips() {&#10;        myTrips.clear();&#10;        myTrips.addAll(tripService.getUserTrips(tripService.getCurrentUser().getUsername()));&#10;&#10;        availableTrips.clear();&#10;        availableTrips.addAll(tripService.getPostedTrips().stream()&#10;                .filter(trip -&gt; !trip.getCreatorUsername().equals(tripService.getCurrentUser().getUsername()))&#10;                .toList());&#10;    }&#10;&#10;    private void displayTripDetails(Trip trip) {&#10;        if (trip == null || tripDetailsArea == null) {&#10;            return;&#10;        }&#10;&#10;        StringBuilder details = new StringBuilder();&#10;        details.append(&quot;Title: &quot;).append(trip.getTitle()).append(&quot;\n&quot;);&#10;        details.append(&quot;Type: &quot;).append(trip.getType()).append(&quot;\n&quot;);&#10;        details.append(&quot;Date: &quot;).append(trip.getDate()).append(&quot;\n&quot;);&#10;        details.append(&quot;Route: &quot;).append(trip.getRoute()).append(&quot;\n&quot;);&#10;        details.append(&quot;Budget: $&quot;).append(String.format(&quot;%.2f&quot;, trip.getBudget())).append(&quot;\n&quot;);&#10;        details.append(&quot;Description: &quot;).append(trip.getDescription()).append(&quot;\n&quot;);&#10;        details.append(&quot;Creator: &quot;).append(trip.getCreatorUsername()).append(&quot;\n&quot;);&#10;        details.append(&quot;Status: &quot;).append(trip.getStatus()).append(&quot;\n&quot;);&#10;&#10;        if (trip.isGroupTrip()) {&#10;            details.append(&quot;\nMembers: &quot;).append(trip.getApprovedMembers().size()).append(&quot;\n&quot;);&#10;            details.append(&quot;Pending Requests: &quot;).append(&#10;                trip.getJoinRequests().stream()&#10;                    .filter(r -&gt; r.getStatus() == JoinRequest.RequestStatus.PENDING)&#10;                    .count()&#10;            ).append(&quot;\n&quot;);&#10;        }&#10;&#10;        tripDetailsArea.setText(details.toString());&#10;    }&#10;&#10;    private void clearForm() {&#10;        titleField.clear();&#10;        routeField.clear();&#10;        budgetField.clear();&#10;        descriptionArea.clear();&#10;        if (postContentArea != null) postContentArea.clear();&#10;        datePicker.setValue(null);&#10;        soloTripRadio.setSelected(true);&#10;    }&#10;&#10;    private void showAlert(String title, String message) {&#10;        Alert alert = new Alert(Alert.AlertType.INFORMATION);&#10;        alert.setTitle(title);&#10;        alert.setHeaderText(null);&#10;        alert.setContentText(message);&#10;        alert.showAndWait();&#10;    }&#10;&#10;    // Custom ListCell for displaying trips&#10;    private static class TripListCell extends ListCell&lt;Trip&gt; {&#10;        @Override&#10;        protected void updateItem(Trip trip, boolean empty) {&#10;            super.updateItem(trip, empty);&#10;            if (empty || trip == null) {&#10;                setText(null);&#10;            } else {&#10;                String typeIcon = trip.isGroupTrip() ? &quot;&quot; : &quot;&quot;;&#10;                setText(typeIcon + &quot; &quot; + trip.getTitle() + &quot; - &quot; + trip.getDate());&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.voyeger;&#10;&#10;import javafx.fxml.FXML;&#10;import javafx.fxml.FXMLLoader;&#10;import javafx.scene.Parent;&#10;import javafx.scene.Scene;&#10;import javafx.scene.control.*;&#10;import javafx.stage.Stage;&#10;import javafx.collections.FXCollections;&#10;import javafx.collections.ObservableList;&#10;&#10;public class TripPlannerController {&#10;&#10;    @FXML&#10;    private TextField titleField, routeField, budgetField;&#10;&#10;    @FXML&#10;    private TextArea descriptionArea;&#10;&#10;    @FXML&#10;    private DatePicker datePicker;&#10;&#10;    @FXML&#10;    private RadioButton soloTripRadio, groupTripRadio;&#10;&#10;    @FXML&#10;    private Label statusLabel;&#10;&#10;    @FXML&#10;    private ListView&lt;Trip&gt; myTripsListView;&#10;&#10;    @FXML&#10;    private ListView&lt;Trip&gt; availableTripsListView;&#10;&#10;    @FXML&#10;    private TextArea tripDetailsArea;&#10;&#10;    @FXML&#10;    private TextArea postContentArea;&#10;&#10;    private TripService tripService;&#10;    private ObservableList&lt;Trip&gt; myTrips;&#10;    private ObservableList&lt;Trip&gt; availableTrips;&#10;&#10;    @FXML&#10;    public void initialize() {&#10;        tripService = TripService.getInstance();&#10;        myTrips = FXCollections.observableArrayList();&#10;        availableTrips = FXCollections.observableArrayList();&#10;&#10;        if (myTripsListView != null) {&#10;            myTripsListView.setItems(myTrips);&#10;            myTripsListView.setCellFactory(lv -&gt; new TripListCell());&#10;            myTripsListView.getSelectionModel().selectedItemProperty().addListener(&#10;                (obs, oldVal, newVal) -&gt; displayTripDetails(newVal)&#10;            );&#10;        }&#10;&#10;        if (availableTripsListView != null) {&#10;            availableTripsListView.setItems(availableTrips);&#10;            availableTripsListView.setCellFactory(lv -&gt; new TripListCell());&#10;            availableTripsListView.getSelectionModel().selectedItemProperty().addListener(&#10;                (obs, oldVal, newVal) -&gt; displayTripDetails(newVal)&#10;            );&#10;        }&#10;&#10;        refreshTrips();&#10;    }&#10;&#10;    @FXML&#10;    private void handleCreateTrip() {&#10;        String title = titleField.getText().trim();&#10;        String route = routeField.getText().trim();&#10;        String budgetStr = budgetField.getText().trim();&#10;        String description = descriptionArea.getText().trim();&#10;        Trip.TripType type = soloTripRadio.isSelected() ? Trip.TripType.SOLO : Trip.TripType.GROUP;&#10;&#10;        if (title.isEmpty() || route.isEmpty() || budgetStr.isEmpty() || datePicker.getValue() == null) {&#10;            statusLabel.setText(&quot;⚠ Please fill in all required fields!&quot;);&#10;            statusLabel.setStyle(&quot;-fx-text-fill: red;&quot;);&#10;            return;&#10;        }&#10;&#10;        try {&#10;            double budget = Double.parseDouble(budgetStr);&#10;            Trip trip = tripService.createTrip(title, datePicker.getValue(), route, budget, description, type);&#10;&#10;            // Create post content&#10;            String postContent = postContentArea != null &amp;&amp; !postContentArea.getText().trim().isEmpty()&#10;                ? postContentArea.getText().trim()&#10;                : &quot;Check out my new &quot; + type.toString().toLowerCase() + &quot; trip!&quot;;&#10;&#10;            tripService.postTrip(trip.getId(), postContent);&#10;&#10;            statusLabel.setText(&quot;✅ &quot; + type + &quot; trip created and posted to news feed!&quot;);&#10;            statusLabel.setStyle(&quot;-fx-text-fill: green;&quot;);&#10;&#10;            clearForm();&#10;            refreshTrips();&#10;&#10;        } catch (NumberFormatException e) {&#10;            statusLabel.setText(&quot;⚠ Invalid budget format!&quot;);&#10;            statusLabel.setStyle(&quot;-fx-text-fill: red;&quot;);&#10;        }&#10;    }&#10;&#10;    @FXML&#10;    private void handleRequestToJoin() {&#10;        Trip selectedTrip = availableTripsListView.getSelectionModel().getSelectedItem();&#10;        if (selectedTrip == null) {&#10;            showAlert(&quot;No Selection&quot;, &quot;Please select a trip to join.&quot;);&#10;            return;&#10;        }&#10;&#10;        if (!selectedTrip.isGroupTrip()) {&#10;            showAlert(&quot;Cannot Join&quot;, &quot;This is a solo trip. You cannot request to join.&quot;);&#10;            return;&#10;        }&#10;&#10;        if (selectedTrip.getCreatorUsername().equals(tripService.getCurrentUser().getUsername())) {&#10;            showAlert(&quot;Cannot Join&quot;, &quot;You are the creator of this trip.&quot;);&#10;            return;&#10;        }&#10;&#10;        TextInputDialog dialog = new TextInputDialog();&#10;        dialog.setTitle(&quot;Request to Join&quot;);&#10;        dialog.setHeaderText(&quot;Request to join: &quot; + selectedTrip.getTitle());&#10;        dialog.setContentText(&quot;Enter a message:&quot;);&#10;&#10;        dialog.showAndWait().ifPresent(message -&gt; {&#10;            JoinRequest request = tripService.requestToJoin(selectedTrip.getId(), message);&#10;            if (request != null) {&#10;                showAlert(&quot;Request Sent&quot;, &quot;Your join request has been sent to the trip creator!&quot;);&#10;            }&#10;        });&#10;    }&#10;&#10;    @FXML&#10;    private void handleManageRequests() {&#10;        Trip selectedTrip = myTripsListView.getSelectionModel().getSelectedItem();&#10;        if (selectedTrip == null) {&#10;            showAlert(&quot;No Selection&quot;, &quot;Please select one of your trips to manage requests.&quot;);&#10;            return;&#10;        }&#10;&#10;        if (!selectedTrip.isGroupTrip()) {&#10;            showAlert(&quot;Solo Trip&quot;, &quot;This is a solo trip. There are no join requests.&quot;);&#10;            return;&#10;        }&#10;&#10;        try {&#10;            FXMLLoader loader = new FXMLLoader(getClass().getResource(&quot;ManageRequests.fxml&quot;));&#10;            Parent root = loader.load();&#10;&#10;            ManageRequestsController controller = loader.getController();&#10;            controller.setTrip(selectedTrip);&#10;&#10;            Stage stage = new Stage();&#10;            stage.setTitle(&quot;Manage Join Requests - &quot; + selectedTrip.getTitle());&#10;            stage.setScene(new Scene(root, 600, 400));&#10;            stage.setResizable(true);&#10;            stage.setMaximized(true);&#10;            stage.show();&#10;&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;            showAlert(&quot;Error&quot;, &quot;Failed to open request management: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    @FXML&#10;    private void handleRefresh() {&#10;        refreshTrips();&#10;        statusLabel.setText(&quot;✅ Refreshed!&quot;);&#10;        statusLabel.setStyle(&quot;-fx-text-fill: green;&quot;);&#10;    }&#10;&#10;    private void refreshTrips() {&#10;        myTrips.clear();&#10;        myTrips.addAll(tripService.getUserTrips(tripService.getCurrentUser().getUsername()));&#10;&#10;        availableTrips.clear();&#10;        availableTrips.addAll(tripService.getPostedTrips().stream()&#10;                .filter(trip -&gt; !trip.getCreatorUsername().equals(tripService.getCurrentUser().getUsername()))&#10;                .toList());&#10;    }&#10;&#10;    private void displayTripDetails(Trip trip) {&#10;        if (trip == null || tripDetailsArea == null) {&#10;            return;&#10;        }&#10;&#10;        StringBuilder details = new StringBuilder();&#10;        details.append(&quot;Title: &quot;).append(trip.getTitle()).append(&quot;\n&quot;);&#10;        details.append(&quot;Type: &quot;).append(trip.getType()).append(&quot;\n&quot;);&#10;        details.append(&quot;Date: &quot;).append(trip.getDate()).append(&quot;\n&quot;);&#10;        details.append(&quot;Route: &quot;).append(trip.getRoute()).append(&quot;\n&quot;);&#10;        details.append(&quot;Budget: $&quot;).append(String.format(&quot;%.2f&quot;, trip.getBudget())).append(&quot;\n&quot;);&#10;        details.append(&quot;Description: &quot;).append(trip.getDescription()).append(&quot;\n&quot;);&#10;        details.append(&quot;Creator: &quot;).append(trip.getCreatorUsername()).append(&quot;\n&quot;);&#10;        details.append(&quot;Status: &quot;).append(trip.getStatus()).append(&quot;\n&quot;);&#10;&#10;        if (trip.isGroupTrip()) {&#10;            details.append(&quot;\nMembers: &quot;).append(trip.getApprovedMembers().size()).append(&quot;\n&quot;);&#10;            details.append(&quot;Pending Requests: &quot;).append(&#10;                trip.getJoinRequests().stream()&#10;                    .filter(r -&gt; r.getStatus() == JoinRequest.RequestStatus.PENDING)&#10;                    .count()&#10;            ).append(&quot;\n&quot;);&#10;        }&#10;&#10;        tripDetailsArea.setText(details.toString());&#10;    }&#10;&#10;    private void clearForm() {&#10;        titleField.clear();&#10;        routeField.clear();&#10;        budgetField.clear();&#10;        descriptionArea.clear();&#10;        if (postContentArea != null) postContentArea.clear();&#10;        datePicker.setValue(null);&#10;        soloTripRadio.setSelected(true);&#10;    }&#10;&#10;    private void showAlert(String title, String message) {&#10;        Alert alert = new Alert(Alert.AlertType.INFORMATION);&#10;        alert.setTitle(title);&#10;        alert.setHeaderText(null);&#10;        alert.setContentText(message);&#10;        alert.showAndWait();&#10;    }&#10;&#10;    // Custom ListCell for displaying trips&#10;    private static class TripListCell extends ListCell&lt;Trip&gt; {&#10;        @Override&#10;        protected void updateItem(Trip trip, boolean empty) {&#10;            super.updateItem(trip, empty);&#10;            if (empty || trip == null) {&#10;                setText(null);&#10;            } else {&#10;                String typeIcon = trip.isGroupTrip() ? &quot;&quot; : &quot;&quot;;&#10;                setText(typeIcon + &quot; &quot; + trip.getTitle() + &quot; - &quot; + trip.getDate());&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/voyeger/WelcomeController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/voyeger/WelcomeController.java" />
              <option name="originalContent" value="package com.example.voyeger;&#10;&#10;import javafx.fxml.FXML;&#10;import javafx.fxml.FXMLLoader;&#10;import javafx.scene.Scene;&#10;import javafx.scene.control.Label;&#10;import javafx.stage.Stage;&#10;import javafx.animation.FadeTransition;&#10;import javafx.animation.TranslateTransition;&#10;import javafx.util.Duration;&#10;import javafx.scene.Node;&#10;import javafx.event.ActionEvent;&#10;&#10;public class WelcomeController {&#10;&#10;    @FXML&#10;    private Label titleLabel;&#10;&#10;    @FXML&#10;    private Label subtitleLabel;&#10;&#10;    @FXML&#10;    public void initialize() {&#10;        // Add fade-in animation to title&#10;        if (titleLabel != null) {&#10;            FadeTransition fadeIn = new FadeTransition(Duration.seconds(1.5), titleLabel);&#10;            fadeIn.setFromValue(0.0);&#10;            fadeIn.setToValue(1.0);&#10;            fadeIn.play();&#10;        }&#10;&#10;        // Add slide-up animation to subtitle&#10;        if (subtitleLabel != null) {&#10;            TranslateTransition slideUp = new TranslateTransition(Duration.seconds(1), subtitleLabel);&#10;            slideUp.setFromY(50);&#10;            slideUp.setToY(0);&#10;&#10;            FadeTransition fadeIn = new FadeTransition(Duration.seconds(1.5), subtitleLabel);&#10;            fadeIn.setFromValue(0.0);&#10;            fadeIn.setToValue(1.0);&#10;&#10;            fadeIn.play();&#10;            slideUp.play();&#10;        }&#10;    }&#10;&#10;    @FXML&#10;    private void handleSignUp(ActionEvent event) {&#10;        try {&#10;            FXMLLoader loader = new FXMLLoader(getClass().getResource(&quot;SignUp.fxml&quot;));&#10;            Scene scene = new Scene(loader.load(), 1000, 700);&#10;&#10;            Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();&#10;            stage.setScene(scene);&#10;            stage.setTitle(&quot;Voyager+ - Sign Up&quot;);&#10;&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;            System.err.println(&quot;Failed to load SignUp page: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    @FXML&#10;    private void handleSignIn(ActionEvent event) {&#10;        try {&#10;            FXMLLoader loader = new FXMLLoader(getClass().getResource(&quot;SignIn.fxml&quot;));&#10;            Scene scene = new Scene(loader.load(), 1000, 700);&#10;&#10;            Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();&#10;            stage.setScene(scene);&#10;            stage.setTitle(&quot;Voyager+ - Sign In&quot;);&#10;&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;            System.err.println(&quot;Failed to load SignIn page: &quot; + e.getMessage());&#10;        }&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.example.voyeger;&#10;&#10;import javafx.fxml.FXML;&#10;import javafx.fxml.FXMLLoader;&#10;import javafx.scene.Scene;&#10;import javafx.scene.control.Label;&#10;import javafx.stage.Stage;&#10;import javafx.animation.FadeTransition;&#10;import javafx.animation.TranslateTransition;&#10;import javafx.util.Duration;&#10;import javafx.scene.Node;&#10;import javafx.event.ActionEvent;&#10;&#10;public class WelcomeController {&#10;&#10;    @FXML&#10;    private Label titleLabel;&#10;&#10;    @FXML&#10;    private Label subtitleLabel;&#10;&#10;    @FXML&#10;    public void initialize() {&#10;        // Add fade-in animation to title&#10;        if (titleLabel != null) {&#10;            FadeTransition fadeIn = new FadeTransition(Duration.seconds(1.5), titleLabel);&#10;            fadeIn.setFromValue(0.0);&#10;            fadeIn.setToValue(1.0);&#10;            fadeIn.play();&#10;        }&#10;&#10;        // Add slide-up animation to subtitle&#10;        if (subtitleLabel != null) {&#10;            TranslateTransition slideUp = new TranslateTransition(Duration.seconds(1), subtitleLabel);&#10;            slideUp.setFromY(50);&#10;            slideUp.setToY(0);&#10;&#10;            FadeTransition fadeIn = new FadeTransition(Duration.seconds(1.5), subtitleLabel);&#10;            fadeIn.setFromValue(0.0);&#10;            fadeIn.setToValue(1.0);&#10;&#10;            fadeIn.play();&#10;            slideUp.play();&#10;        }&#10;    }&#10;&#10;    @FXML&#10;    private void handleSignUp(ActionEvent event) {&#10;        try {&#10;            FXMLLoader loader = new FXMLLoader(getClass().getResource(&quot;SignUp.fxml&quot;));&#10;            Scene scene = new Scene(loader.load(), 1000, 700);&#10;&#10;            Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();&#10;            stage.setScene(scene);&#10;            stage.setTitle(&quot;Voyager+ - Sign Up&quot;);&#10;            stage.setResizable(true);&#10;            stage.setMaximized(true);&#10;&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;            System.err.println(&quot;Failed to load SignUp page: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    @FXML&#10;    private void handleSignIn(ActionEvent event) {&#10;        try {&#10;            FXMLLoader loader = new FXMLLoader(getClass().getResource(&quot;SignIn.fxml&quot;));&#10;            Scene scene = new Scene(loader.load(), 1000, 700);&#10;&#10;            Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();&#10;            stage.setScene(scene);&#10;            stage.setTitle(&quot;Voyager+ - Sign In&quot;);&#10;            stage.setResizable(true);&#10;            stage.setMaximized(true);&#10;&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;            System.err.println(&quot;Failed to load SignIn page: &quot; + e.getMessage());&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>